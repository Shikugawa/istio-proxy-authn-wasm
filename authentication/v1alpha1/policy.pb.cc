// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authentication/v1alpha1/policy.proto

#include "authentication/v1alpha1/policy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_authentication_2fv1alpha1_2fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Jwt_authentication_2fv1alpha1_2fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_authentication_2fv1alpha1_2fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Jwt_TriggerRule_authentication_2fv1alpha1_2fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_authentication_2fv1alpha1_2fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MutualTls_authentication_2fv1alpha1_2fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_authentication_2fv1alpha1_2fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OriginAuthenticationMethod_authentication_2fv1alpha1_2fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_authentication_2fv1alpha1_2fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PeerAuthenticationMethod_authentication_2fv1alpha1_2fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_authentication_2fv1alpha1_2fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PortSelector_authentication_2fv1alpha1_2fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_authentication_2fv1alpha1_2fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringMatch_authentication_2fv1alpha1_2fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_authentication_2fv1alpha1_2fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TargetSelector_authentication_2fv1alpha1_2fpolicy_2eproto;
namespace istio {
namespace authentication {
namespace v1alpha1 {
class StringMatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringMatch> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exact_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suffix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regex_;
} _StringMatch_default_instance_;
class MutualTlsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MutualTls> _instance;
} _MutualTls_default_instance_;
class Jwt_TriggerRuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Jwt_TriggerRule> _instance;
} _Jwt_TriggerRule_default_instance_;
class JwtDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Jwt> _instance;
} _Jwt_default_instance_;
class PeerAuthenticationMethodDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerAuthenticationMethod> _instance;
  const ::istio::authentication::v1alpha1::MutualTls* mtls_;
  const ::istio::authentication::v1alpha1::Jwt* jwt_;
} _PeerAuthenticationMethod_default_instance_;
class OriginAuthenticationMethodDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OriginAuthenticationMethod> _instance;
} _OriginAuthenticationMethod_default_instance_;
class PolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Policy> _instance;
} _Policy_default_instance_;
class TargetSelectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargetSelector> _instance;
} _TargetSelector_default_instance_;
class PortSelectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PortSelector> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
} _PortSelector_default_instance_;
}  // namespace v1alpha1
}  // namespace authentication
}  // namespace istio
static void InitDefaultsscc_info_Jwt_authentication_2fv1alpha1_2fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::istio::authentication::v1alpha1::_Jwt_default_instance_;
    new (ptr) ::istio::authentication::v1alpha1::Jwt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::authentication::v1alpha1::Jwt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Jwt_authentication_2fv1alpha1_2fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Jwt_authentication_2fv1alpha1_2fpolicy_2eproto}, {
      &scc_info_Jwt_TriggerRule_authentication_2fv1alpha1_2fpolicy_2eproto.base,}};

static void InitDefaultsscc_info_Jwt_TriggerRule_authentication_2fv1alpha1_2fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::istio::authentication::v1alpha1::_Jwt_TriggerRule_default_instance_;
    new (ptr) ::istio::authentication::v1alpha1::Jwt_TriggerRule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::authentication::v1alpha1::Jwt_TriggerRule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Jwt_TriggerRule_authentication_2fv1alpha1_2fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Jwt_TriggerRule_authentication_2fv1alpha1_2fpolicy_2eproto}, {
      &scc_info_StringMatch_authentication_2fv1alpha1_2fpolicy_2eproto.base,}};

static void InitDefaultsscc_info_MutualTls_authentication_2fv1alpha1_2fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::istio::authentication::v1alpha1::_MutualTls_default_instance_;
    new (ptr) ::istio::authentication::v1alpha1::MutualTls();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::authentication::v1alpha1::MutualTls::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MutualTls_authentication_2fv1alpha1_2fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MutualTls_authentication_2fv1alpha1_2fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_OriginAuthenticationMethod_authentication_2fv1alpha1_2fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::istio::authentication::v1alpha1::_OriginAuthenticationMethod_default_instance_;
    new (ptr) ::istio::authentication::v1alpha1::OriginAuthenticationMethod();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::authentication::v1alpha1::OriginAuthenticationMethod::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OriginAuthenticationMethod_authentication_2fv1alpha1_2fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_OriginAuthenticationMethod_authentication_2fv1alpha1_2fpolicy_2eproto}, {
      &scc_info_Jwt_authentication_2fv1alpha1_2fpolicy_2eproto.base,}};

static void InitDefaultsscc_info_PeerAuthenticationMethod_authentication_2fv1alpha1_2fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::istio::authentication::v1alpha1::_PeerAuthenticationMethod_default_instance_;
    new (ptr) ::istio::authentication::v1alpha1::PeerAuthenticationMethod();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::authentication::v1alpha1::PeerAuthenticationMethod::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PeerAuthenticationMethod_authentication_2fv1alpha1_2fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PeerAuthenticationMethod_authentication_2fv1alpha1_2fpolicy_2eproto}, {
      &scc_info_MutualTls_authentication_2fv1alpha1_2fpolicy_2eproto.base,
      &scc_info_Jwt_authentication_2fv1alpha1_2fpolicy_2eproto.base,}};

static void InitDefaultsscc_info_Policy_authentication_2fv1alpha1_2fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::istio::authentication::v1alpha1::_Policy_default_instance_;
    new (ptr) ::istio::authentication::v1alpha1::Policy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::authentication::v1alpha1::Policy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Policy_authentication_2fv1alpha1_2fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_Policy_authentication_2fv1alpha1_2fpolicy_2eproto}, {
      &scc_info_TargetSelector_authentication_2fv1alpha1_2fpolicy_2eproto.base,
      &scc_info_PeerAuthenticationMethod_authentication_2fv1alpha1_2fpolicy_2eproto.base,
      &scc_info_OriginAuthenticationMethod_authentication_2fv1alpha1_2fpolicy_2eproto.base,}};

static void InitDefaultsscc_info_PortSelector_authentication_2fv1alpha1_2fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::istio::authentication::v1alpha1::_PortSelector_default_instance_;
    new (ptr) ::istio::authentication::v1alpha1::PortSelector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::authentication::v1alpha1::PortSelector::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PortSelector_authentication_2fv1alpha1_2fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PortSelector_authentication_2fv1alpha1_2fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_StringMatch_authentication_2fv1alpha1_2fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::istio::authentication::v1alpha1::_StringMatch_default_instance_;
    new (ptr) ::istio::authentication::v1alpha1::StringMatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::authentication::v1alpha1::StringMatch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringMatch_authentication_2fv1alpha1_2fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StringMatch_authentication_2fv1alpha1_2fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_TargetSelector_authentication_2fv1alpha1_2fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::istio::authentication::v1alpha1::_TargetSelector_default_instance_;
    new (ptr) ::istio::authentication::v1alpha1::TargetSelector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::authentication::v1alpha1::TargetSelector::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TargetSelector_authentication_2fv1alpha1_2fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TargetSelector_authentication_2fv1alpha1_2fpolicy_2eproto}, {
      &scc_info_PortSelector_authentication_2fv1alpha1_2fpolicy_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_authentication_2fv1alpha1_2fpolicy_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_authentication_2fv1alpha1_2fpolicy_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_authentication_2fv1alpha1_2fpolicy_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_authentication_2fv1alpha1_2fpolicy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::StringMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::StringMatch, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::istio::authentication::v1alpha1::StringMatchDefaultTypeInternal, exact_),
  offsetof(::istio::authentication::v1alpha1::StringMatchDefaultTypeInternal, prefix_),
  offsetof(::istio::authentication::v1alpha1::StringMatchDefaultTypeInternal, suffix_),
  offsetof(::istio::authentication::v1alpha1::StringMatchDefaultTypeInternal, regex_),
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::StringMatch, match_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::MutualTls, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::MutualTls, allow_tls_),
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::MutualTls, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::Jwt_TriggerRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::Jwt_TriggerRule, excluded_paths_),
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::Jwt_TriggerRule, included_paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::Jwt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::Jwt, issuer_),
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::Jwt, audiences_),
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::Jwt, jwks_uri_),
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::Jwt, jwks_),
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::Jwt, jwt_headers_),
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::Jwt, jwt_params_),
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::Jwt, trigger_rules_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::PeerAuthenticationMethod, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::PeerAuthenticationMethod, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::istio::authentication::v1alpha1::PeerAuthenticationMethodDefaultTypeInternal, mtls_),
  offsetof(::istio::authentication::v1alpha1::PeerAuthenticationMethodDefaultTypeInternal, jwt_),
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::PeerAuthenticationMethod, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::OriginAuthenticationMethod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::OriginAuthenticationMethod, jwt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::Policy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::Policy, targets_),
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::Policy, peers_),
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::Policy, peer_is_optional_),
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::Policy, origins_),
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::Policy, origin_is_optional_),
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::Policy, principal_binding_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::TargetSelector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::TargetSelector, name_),
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::TargetSelector, ports_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::PortSelector, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::PortSelector, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::istio::authentication::v1alpha1::PortSelectorDefaultTypeInternal, number_),
  offsetof(::istio::authentication::v1alpha1::PortSelectorDefaultTypeInternal, name_),
  PROTOBUF_FIELD_OFFSET(::istio::authentication::v1alpha1::PortSelector, port_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::istio::authentication::v1alpha1::StringMatch)},
  { 10, -1, sizeof(::istio::authentication::v1alpha1::MutualTls)},
  { 17, -1, sizeof(::istio::authentication::v1alpha1::Jwt_TriggerRule)},
  { 24, -1, sizeof(::istio::authentication::v1alpha1::Jwt)},
  { 36, -1, sizeof(::istio::authentication::v1alpha1::PeerAuthenticationMethod)},
  { 44, -1, sizeof(::istio::authentication::v1alpha1::OriginAuthenticationMethod)},
  { 50, -1, sizeof(::istio::authentication::v1alpha1::Policy)},
  { 61, -1, sizeof(::istio::authentication::v1alpha1::TargetSelector)},
  { 68, -1, sizeof(::istio::authentication::v1alpha1::PortSelector)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::istio::authentication::v1alpha1::_StringMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::istio::authentication::v1alpha1::_MutualTls_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::istio::authentication::v1alpha1::_Jwt_TriggerRule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::istio::authentication::v1alpha1::_Jwt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::istio::authentication::v1alpha1::_PeerAuthenticationMethod_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::istio::authentication::v1alpha1::_OriginAuthenticationMethod_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::istio::authentication::v1alpha1::_Policy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::istio::authentication::v1alpha1::_TargetSelector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::istio::authentication::v1alpha1::_PortSelector_default_instance_),
};

const char descriptor_table_protodef_authentication_2fv1alpha1_2fpolicy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$authentication/v1alpha1/policy.proto\022\035"
  "istio.authentication.v1alpha1\032\037google/ap"
  "i/field_behavior.proto\"a\n\013StringMatch\022\017\n"
  "\005exact\030\001 \001(\tH\000\022\020\n\006prefix\030\002 \001(\tH\000\022\020\n\006suff"
  "ix\030\003 \001(\tH\000\022\017\n\005regex\030\004 \001(\tH\000B\014\n\nmatch_typ"
  "e\"\203\001\n\tMutualTls\022\025\n\tallow_tls\030\001 \001(\010B\002\030\001\022;"
  "\n\004mode\030\002 \001(\0162-.istio.authentication.v1al"
  "pha1.MutualTls.Mode\"\"\n\004Mode\022\n\n\006STRICT\020\000\022"
  "\016\n\nPERMISSIVE\020\001\"\320\002\n\003Jwt\022\016\n\006issuer\030\001 \001(\t\022"
  "\021\n\taudiences\030\002 \003(\t\022\020\n\010jwks_uri\030\003 \001(\t\022\014\n\004"
  "jwks\030\n \001(\t\022\023\n\013jwt_headers\030\006 \003(\t\022\022\n\njwt_p"
  "arams\030\007 \003(\t\022E\n\rtrigger_rules\030\t \003(\0132..ist"
  "io.authentication.v1alpha1.Jwt.TriggerRu"
  "le\032\225\001\n\013TriggerRule\022B\n\016excluded_paths\030\001 \003"
  "(\0132*.istio.authentication.v1alpha1.Strin"
  "gMatch\022B\n\016included_paths\030\002 \003(\0132*.istio.a"
  "uthentication.v1alpha1.StringMatch\"\225\001\n\030P"
  "eerAuthenticationMethod\0228\n\004mtls\030\001 \001(\0132(."
  "istio.authentication.v1alpha1.MutualTlsH"
  "\000\0225\n\003jwt\030\002 \001(\0132\".istio.authentication.v1"
  "alpha1.JwtB\002\030\001H\000B\010\n\006params\"M\n\032OriginAuth"
  "enticationMethod\022/\n\003jwt\030\001 \001(\0132\".istio.au"
  "thentication.v1alpha1.Jwt\"\362\002\n\006Policy\022B\n\007"
  "targets\030\001 \003(\0132-.istio.authentication.v1a"
  "lpha1.TargetSelectorB\002\030\001\022F\n\005peers\030\002 \003(\0132"
  "7.istio.authentication.v1alpha1.PeerAuth"
  "enticationMethod\022\034\n\020peer_is_optional\030\003 \001"
  "(\010B\002\030\001\022N\n\007origins\030\004 \003(\01329.istio.authenti"
  "cation.v1alpha1.OriginAuthenticationMeth"
  "odB\002\030\001\022\036\n\022origin_is_optional\030\005 \001(\010B\002\030\001\022N"
  "\n\021principal_binding\030\006 \001(\0162/.istio.authen"
  "tication.v1alpha1.PrincipalBindingB\002\030\001\"m"
  "\n\016TargetSelector\022\021\n\004name\030\001 \001(\tB\003\340A\002\022:\n\005p"
  "orts\030\002 \003(\0132+.istio.authentication.v1alph"
  "a1.PortSelectorJ\004\010\003\020\004R\006labels\"8\n\014PortSel"
  "ector\022\020\n\006number\030\001 \001(\rH\000\022\016\n\004name\030\002 \001(\tH\000B"
  "\006\n\004port*0\n\020PrincipalBinding\022\014\n\010USE_PEER\020"
  "\000\022\016\n\nUSE_ORIGIN\020\001B&Z$istio.io/api/authen"
  "tication/v1alpha1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_authentication_2fv1alpha1_2fpolicy_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_authentication_2fv1alpha1_2fpolicy_2eproto_sccs[9] = {
  &scc_info_Jwt_authentication_2fv1alpha1_2fpolicy_2eproto.base,
  &scc_info_Jwt_TriggerRule_authentication_2fv1alpha1_2fpolicy_2eproto.base,
  &scc_info_MutualTls_authentication_2fv1alpha1_2fpolicy_2eproto.base,
  &scc_info_OriginAuthenticationMethod_authentication_2fv1alpha1_2fpolicy_2eproto.base,
  &scc_info_PeerAuthenticationMethod_authentication_2fv1alpha1_2fpolicy_2eproto.base,
  &scc_info_Policy_authentication_2fv1alpha1_2fpolicy_2eproto.base,
  &scc_info_PortSelector_authentication_2fv1alpha1_2fpolicy_2eproto.base,
  &scc_info_StringMatch_authentication_2fv1alpha1_2fpolicy_2eproto.base,
  &scc_info_TargetSelector_authentication_2fv1alpha1_2fpolicy_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_authentication_2fv1alpha1_2fpolicy_2eproto_once;
static bool descriptor_table_authentication_2fv1alpha1_2fpolicy_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_authentication_2fv1alpha1_2fpolicy_2eproto = {
  &descriptor_table_authentication_2fv1alpha1_2fpolicy_2eproto_initialized, descriptor_table_protodef_authentication_2fv1alpha1_2fpolicy_2eproto, "authentication/v1alpha1/policy.proto", 1545,
  &descriptor_table_authentication_2fv1alpha1_2fpolicy_2eproto_once, descriptor_table_authentication_2fv1alpha1_2fpolicy_2eproto_sccs, descriptor_table_authentication_2fv1alpha1_2fpolicy_2eproto_deps, 9, 1,
  schemas, file_default_instances, TableStruct_authentication_2fv1alpha1_2fpolicy_2eproto::offsets,
  file_level_metadata_authentication_2fv1alpha1_2fpolicy_2eproto, 9, file_level_enum_descriptors_authentication_2fv1alpha1_2fpolicy_2eproto, file_level_service_descriptors_authentication_2fv1alpha1_2fpolicy_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_authentication_2fv1alpha1_2fpolicy_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_authentication_2fv1alpha1_2fpolicy_2eproto), true);
namespace istio {
namespace authentication {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MutualTls_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_authentication_2fv1alpha1_2fpolicy_2eproto);
  return file_level_enum_descriptors_authentication_2fv1alpha1_2fpolicy_2eproto[0];
}
bool MutualTls_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MutualTls_Mode MutualTls::STRICT;
constexpr MutualTls_Mode MutualTls::PERMISSIVE;
constexpr MutualTls_Mode MutualTls::Mode_MIN;
constexpr MutualTls_Mode MutualTls::Mode_MAX;
constexpr int MutualTls::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrincipalBinding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_authentication_2fv1alpha1_2fpolicy_2eproto);
  return file_level_enum_descriptors_authentication_2fv1alpha1_2fpolicy_2eproto[1];
}
bool PrincipalBinding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void StringMatch::InitAsDefaultInstance() {
  ::istio::authentication::v1alpha1::_StringMatch_default_instance_.exact_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::istio::authentication::v1alpha1::_StringMatch_default_instance_.prefix_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::istio::authentication::v1alpha1::_StringMatch_default_instance_.suffix_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::istio::authentication::v1alpha1::_StringMatch_default_instance_.regex_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class StringMatch::_Internal {
 public:
};

StringMatch::StringMatch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.authentication.v1alpha1.StringMatch)
}
StringMatch::StringMatch(const StringMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_match_type();
  switch (from.match_type_case()) {
    case kExact: {
      set_exact(from.exact());
      break;
    }
    case kPrefix: {
      set_prefix(from.prefix());
      break;
    }
    case kSuffix: {
      set_suffix(from.suffix());
      break;
    }
    case kRegex: {
      set_regex(from.regex());
      break;
    }
    case MATCH_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:istio.authentication.v1alpha1.StringMatch)
}

void StringMatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StringMatch_authentication_2fv1alpha1_2fpolicy_2eproto.base);
  clear_has_match_type();
}

StringMatch::~StringMatch() {
  // @@protoc_insertion_point(destructor:istio.authentication.v1alpha1.StringMatch)
  SharedDtor();
}

void StringMatch::SharedDtor() {
  if (has_match_type()) {
    clear_match_type();
  }
}

void StringMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringMatch& StringMatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StringMatch_authentication_2fv1alpha1_2fpolicy_2eproto.base);
  return *internal_default_instance();
}


void StringMatch::clear_match_type() {
// @@protoc_insertion_point(one_of_clear_start:istio.authentication.v1alpha1.StringMatch)
  switch (match_type_case()) {
    case kExact: {
      match_type_.exact_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kPrefix: {
      match_type_.prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kSuffix: {
      match_type_.suffix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRegex: {
      match_type_.regex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case MATCH_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MATCH_TYPE_NOT_SET;
}


void StringMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.authentication.v1alpha1.StringMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_match_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StringMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string exact = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_exact(), ptr, ctx, "istio.authentication.v1alpha1.StringMatch.exact");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_prefix(), ptr, ctx, "istio.authentication.v1alpha1.StringMatch.prefix");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string suffix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_suffix(), ptr, ctx, "istio.authentication.v1alpha1.StringMatch.suffix");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_regex(), ptr, ctx, "istio.authentication.v1alpha1.StringMatch.regex");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StringMatch::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.authentication.v1alpha1.StringMatch)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string exact = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_exact()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->exact().data(), static_cast<int>(this->exact().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "istio.authentication.v1alpha1.StringMatch.exact"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prefix = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->prefix().data(), static_cast<int>(this->prefix().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "istio.authentication.v1alpha1.StringMatch.prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string suffix = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_suffix()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->suffix().data(), static_cast<int>(this->suffix().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "istio.authentication.v1alpha1.StringMatch.suffix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string regex = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_regex()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->regex().data(), static_cast<int>(this->regex().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "istio.authentication.v1alpha1.StringMatch.regex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.authentication.v1alpha1.StringMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.authentication.v1alpha1.StringMatch)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StringMatch::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.authentication.v1alpha1.StringMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string exact = 1;
  if (has_exact()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exact().data(), static_cast<int>(this->exact().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.StringMatch.exact");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->exact(), output);
  }

  // string prefix = 2;
  if (has_prefix()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.StringMatch.prefix");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->prefix(), output);
  }

  // string suffix = 3;
  if (has_suffix()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->suffix().data(), static_cast<int>(this->suffix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.StringMatch.suffix");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->suffix(), output);
  }

  // string regex = 4;
  if (has_regex()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->regex().data(), static_cast<int>(this->regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.StringMatch.regex");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->regex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.authentication.v1alpha1.StringMatch)
}

::PROTOBUF_NAMESPACE_ID::uint8* StringMatch::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:istio.authentication.v1alpha1.StringMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string exact = 1;
  if (has_exact()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exact().data(), static_cast<int>(this->exact().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.StringMatch.exact");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->exact(), target);
  }

  // string prefix = 2;
  if (has_prefix()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.StringMatch.prefix");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->prefix(), target);
  }

  // string suffix = 3;
  if (has_suffix()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->suffix().data(), static_cast<int>(this->suffix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.StringMatch.suffix");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->suffix(), target);
  }

  // string regex = 4;
  if (has_regex()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->regex().data(), static_cast<int>(this->regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.StringMatch.regex");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->regex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.authentication.v1alpha1.StringMatch)
  return target;
}

size_t StringMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.authentication.v1alpha1.StringMatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (match_type_case()) {
    // string exact = 1;
    case kExact: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->exact());
      break;
    }
    // string prefix = 2;
    case kPrefix: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->prefix());
      break;
    }
    // string suffix = 3;
    case kSuffix: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->suffix());
      break;
    }
    // string regex = 4;
    case kRegex: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->regex());
      break;
    }
    case MATCH_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringMatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.authentication.v1alpha1.StringMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const StringMatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringMatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.authentication.v1alpha1.StringMatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.authentication.v1alpha1.StringMatch)
    MergeFrom(*source);
  }
}

void StringMatch::MergeFrom(const StringMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.authentication.v1alpha1.StringMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.match_type_case()) {
    case kExact: {
      set_exact(from.exact());
      break;
    }
    case kPrefix: {
      set_prefix(from.prefix());
      break;
    }
    case kSuffix: {
      set_suffix(from.suffix());
      break;
    }
    case kRegex: {
      set_regex(from.regex());
      break;
    }
    case MATCH_TYPE_NOT_SET: {
      break;
    }
  }
}

void StringMatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.authentication.v1alpha1.StringMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringMatch::CopyFrom(const StringMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.authentication.v1alpha1.StringMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringMatch::IsInitialized() const {
  return true;
}

void StringMatch::InternalSwap(StringMatch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(match_type_, other->match_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringMatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MutualTls::InitAsDefaultInstance() {
}
class MutualTls::_Internal {
 public:
};

MutualTls::MutualTls()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.authentication.v1alpha1.MutualTls)
}
MutualTls::MutualTls(const MutualTls& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&allow_tls_, &from.allow_tls_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&allow_tls_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:istio.authentication.v1alpha1.MutualTls)
}

void MutualTls::SharedCtor() {
  ::memset(&allow_tls_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&allow_tls_)) + sizeof(mode_));
}

MutualTls::~MutualTls() {
  // @@protoc_insertion_point(destructor:istio.authentication.v1alpha1.MutualTls)
  SharedDtor();
}

void MutualTls::SharedDtor() {
}

void MutualTls::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MutualTls& MutualTls::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MutualTls_authentication_2fv1alpha1_2fpolicy_2eproto.base);
  return *internal_default_instance();
}


void MutualTls::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.authentication.v1alpha1.MutualTls)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&allow_tls_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&allow_tls_)) + sizeof(mode_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MutualTls::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool allow_tls = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          allow_tls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .istio.authentication.v1alpha1.MutualTls.Mode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_mode(static_cast<::istio::authentication::v1alpha1::MutualTls_Mode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MutualTls::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.authentication.v1alpha1.MutualTls)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool allow_tls = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_tls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.authentication.v1alpha1.MutualTls.Mode mode = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::istio::authentication::v1alpha1::MutualTls_Mode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.authentication.v1alpha1.MutualTls)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.authentication.v1alpha1.MutualTls)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MutualTls::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.authentication.v1alpha1.MutualTls)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool allow_tls = 1 [deprecated = true];
  if (this->allow_tls() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->allow_tls(), output);
  }

  // .istio.authentication.v1alpha1.MutualTls.Mode mode = 2;
  if (this->mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.authentication.v1alpha1.MutualTls)
}

::PROTOBUF_NAMESPACE_ID::uint8* MutualTls::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:istio.authentication.v1alpha1.MutualTls)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool allow_tls = 1 [deprecated = true];
  if (this->allow_tls() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->allow_tls(), target);
  }

  // .istio.authentication.v1alpha1.MutualTls.Mode mode = 2;
  if (this->mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.authentication.v1alpha1.MutualTls)
  return target;
}

size_t MutualTls::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.authentication.v1alpha1.MutualTls)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool allow_tls = 1 [deprecated = true];
  if (this->allow_tls() != 0) {
    total_size += 1 + 1;
  }

  // .istio.authentication.v1alpha1.MutualTls.Mode mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->mode());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MutualTls::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.authentication.v1alpha1.MutualTls)
  GOOGLE_DCHECK_NE(&from, this);
  const MutualTls* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MutualTls>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.authentication.v1alpha1.MutualTls)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.authentication.v1alpha1.MutualTls)
    MergeFrom(*source);
  }
}

void MutualTls::MergeFrom(const MutualTls& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.authentication.v1alpha1.MutualTls)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.allow_tls() != 0) {
    set_allow_tls(from.allow_tls());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
}

void MutualTls::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.authentication.v1alpha1.MutualTls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutualTls::CopyFrom(const MutualTls& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.authentication.v1alpha1.MutualTls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutualTls::IsInitialized() const {
  return true;
}

void MutualTls::InternalSwap(MutualTls* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(allow_tls_, other->allow_tls_);
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MutualTls::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Jwt_TriggerRule::InitAsDefaultInstance() {
}
class Jwt_TriggerRule::_Internal {
 public:
};

Jwt_TriggerRule::Jwt_TriggerRule()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.authentication.v1alpha1.Jwt.TriggerRule)
}
Jwt_TriggerRule::Jwt_TriggerRule(const Jwt_TriggerRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      excluded_paths_(from.excluded_paths_),
      included_paths_(from.included_paths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:istio.authentication.v1alpha1.Jwt.TriggerRule)
}

void Jwt_TriggerRule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Jwt_TriggerRule_authentication_2fv1alpha1_2fpolicy_2eproto.base);
}

Jwt_TriggerRule::~Jwt_TriggerRule() {
  // @@protoc_insertion_point(destructor:istio.authentication.v1alpha1.Jwt.TriggerRule)
  SharedDtor();
}

void Jwt_TriggerRule::SharedDtor() {
}

void Jwt_TriggerRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Jwt_TriggerRule& Jwt_TriggerRule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Jwt_TriggerRule_authentication_2fv1alpha1_2fpolicy_2eproto.base);
  return *internal_default_instance();
}


void Jwt_TriggerRule::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.authentication.v1alpha1.Jwt.TriggerRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  excluded_paths_.Clear();
  included_paths_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Jwt_TriggerRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .istio.authentication.v1alpha1.StringMatch excluded_paths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_excluded_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .istio.authentication.v1alpha1.StringMatch included_paths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_included_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Jwt_TriggerRule::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.authentication.v1alpha1.Jwt.TriggerRule)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .istio.authentication.v1alpha1.StringMatch excluded_paths = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_excluded_paths()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.authentication.v1alpha1.StringMatch included_paths = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_included_paths()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.authentication.v1alpha1.Jwt.TriggerRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.authentication.v1alpha1.Jwt.TriggerRule)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Jwt_TriggerRule::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.authentication.v1alpha1.Jwt.TriggerRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .istio.authentication.v1alpha1.StringMatch excluded_paths = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->excluded_paths_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->excluded_paths(static_cast<int>(i)),
      output);
  }

  // repeated .istio.authentication.v1alpha1.StringMatch included_paths = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->included_paths_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->included_paths(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.authentication.v1alpha1.Jwt.TriggerRule)
}

::PROTOBUF_NAMESPACE_ID::uint8* Jwt_TriggerRule::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:istio.authentication.v1alpha1.Jwt.TriggerRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .istio.authentication.v1alpha1.StringMatch excluded_paths = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->excluded_paths_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->excluded_paths(static_cast<int>(i)), target);
  }

  // repeated .istio.authentication.v1alpha1.StringMatch included_paths = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->included_paths_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->included_paths(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.authentication.v1alpha1.Jwt.TriggerRule)
  return target;
}

size_t Jwt_TriggerRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.authentication.v1alpha1.Jwt.TriggerRule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .istio.authentication.v1alpha1.StringMatch excluded_paths = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->excluded_paths_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->excluded_paths(static_cast<int>(i)));
    }
  }

  // repeated .istio.authentication.v1alpha1.StringMatch included_paths = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->included_paths_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->included_paths(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Jwt_TriggerRule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.authentication.v1alpha1.Jwt.TriggerRule)
  GOOGLE_DCHECK_NE(&from, this);
  const Jwt_TriggerRule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Jwt_TriggerRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.authentication.v1alpha1.Jwt.TriggerRule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.authentication.v1alpha1.Jwt.TriggerRule)
    MergeFrom(*source);
  }
}

void Jwt_TriggerRule::MergeFrom(const Jwt_TriggerRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.authentication.v1alpha1.Jwt.TriggerRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  excluded_paths_.MergeFrom(from.excluded_paths_);
  included_paths_.MergeFrom(from.included_paths_);
}

void Jwt_TriggerRule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.authentication.v1alpha1.Jwt.TriggerRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Jwt_TriggerRule::CopyFrom(const Jwt_TriggerRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.authentication.v1alpha1.Jwt.TriggerRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Jwt_TriggerRule::IsInitialized() const {
  return true;
}

void Jwt_TriggerRule::InternalSwap(Jwt_TriggerRule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&excluded_paths_)->InternalSwap(CastToBase(&other->excluded_paths_));
  CastToBase(&included_paths_)->InternalSwap(CastToBase(&other->included_paths_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Jwt_TriggerRule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Jwt::InitAsDefaultInstance() {
}
class Jwt::_Internal {
 public:
};

Jwt::Jwt()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.authentication.v1alpha1.Jwt)
}
Jwt::Jwt(const Jwt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      audiences_(from.audiences_),
      jwt_headers_(from.jwt_headers_),
      jwt_params_(from.jwt_params_),
      trigger_rules_(from.trigger_rules_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  issuer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.issuer().empty()) {
    issuer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.issuer_);
  }
  jwks_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.jwks_uri().empty()) {
    jwks_uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.jwks_uri_);
  }
  jwks_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.jwks().empty()) {
    jwks_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.jwks_);
  }
  // @@protoc_insertion_point(copy_constructor:istio.authentication.v1alpha1.Jwt)
}

void Jwt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Jwt_authentication_2fv1alpha1_2fpolicy_2eproto.base);
  issuer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jwks_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jwks_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Jwt::~Jwt() {
  // @@protoc_insertion_point(destructor:istio.authentication.v1alpha1.Jwt)
  SharedDtor();
}

void Jwt::SharedDtor() {
  issuer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jwks_uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jwks_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Jwt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Jwt& Jwt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Jwt_authentication_2fv1alpha1_2fpolicy_2eproto.base);
  return *internal_default_instance();
}


void Jwt::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.authentication.v1alpha1.Jwt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audiences_.Clear();
  jwt_headers_.Clear();
  jwt_params_.Clear();
  trigger_rules_.Clear();
  issuer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jwks_uri_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jwks_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Jwt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string issuer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_issuer(), ptr, ctx, "istio.authentication.v1alpha1.Jwt.issuer");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string audiences = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_audiences(), ptr, ctx, "istio.authentication.v1alpha1.Jwt.audiences");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // string jwks_uri = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_jwks_uri(), ptr, ctx, "istio.authentication.v1alpha1.Jwt.jwks_uri");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string jwt_headers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_jwt_headers(), ptr, ctx, "istio.authentication.v1alpha1.Jwt.jwt_headers");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated string jwt_params = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_jwt_params(), ptr, ctx, "istio.authentication.v1alpha1.Jwt.jwt_params");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // repeated .istio.authentication.v1alpha1.Jwt.TriggerRule trigger_rules = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_trigger_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // string jwks = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_jwks(), ptr, ctx, "istio.authentication.v1alpha1.Jwt.jwks");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Jwt::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.authentication.v1alpha1.Jwt)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string issuer = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_issuer()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->issuer().data(), static_cast<int>(this->issuer().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "istio.authentication.v1alpha1.Jwt.issuer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string audiences = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_audiences()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->audiences(this->audiences_size() - 1).data(),
            static_cast<int>(this->audiences(this->audiences_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "istio.authentication.v1alpha1.Jwt.audiences"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string jwks_uri = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_jwks_uri()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->jwks_uri().data(), static_cast<int>(this->jwks_uri().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "istio.authentication.v1alpha1.Jwt.jwks_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string jwt_headers = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_jwt_headers()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->jwt_headers(this->jwt_headers_size() - 1).data(),
            static_cast<int>(this->jwt_headers(this->jwt_headers_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "istio.authentication.v1alpha1.Jwt.jwt_headers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string jwt_params = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_jwt_params()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->jwt_params(this->jwt_params_size() - 1).data(),
            static_cast<int>(this->jwt_params(this->jwt_params_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "istio.authentication.v1alpha1.Jwt.jwt_params"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.authentication.v1alpha1.Jwt.TriggerRule trigger_rules = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_trigger_rules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string jwks = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_jwks()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->jwks().data(), static_cast<int>(this->jwks().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "istio.authentication.v1alpha1.Jwt.jwks"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.authentication.v1alpha1.Jwt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.authentication.v1alpha1.Jwt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Jwt::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.authentication.v1alpha1.Jwt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string issuer = 1;
  if (this->issuer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->issuer().data(), static_cast<int>(this->issuer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.Jwt.issuer");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->issuer(), output);
  }

  // repeated string audiences = 2;
  for (int i = 0, n = this->audiences_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->audiences(i).data(), static_cast<int>(this->audiences(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.Jwt.audiences");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->audiences(i), output);
  }

  // string jwks_uri = 3;
  if (this->jwks_uri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->jwks_uri().data(), static_cast<int>(this->jwks_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.Jwt.jwks_uri");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->jwks_uri(), output);
  }

  // repeated string jwt_headers = 6;
  for (int i = 0, n = this->jwt_headers_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->jwt_headers(i).data(), static_cast<int>(this->jwt_headers(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.Jwt.jwt_headers");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      6, this->jwt_headers(i), output);
  }

  // repeated string jwt_params = 7;
  for (int i = 0, n = this->jwt_params_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->jwt_params(i).data(), static_cast<int>(this->jwt_params(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.Jwt.jwt_params");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      7, this->jwt_params(i), output);
  }

  // repeated .istio.authentication.v1alpha1.Jwt.TriggerRule trigger_rules = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trigger_rules_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->trigger_rules(static_cast<int>(i)),
      output);
  }

  // string jwks = 10;
  if (this->jwks().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->jwks().data(), static_cast<int>(this->jwks().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.Jwt.jwks");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->jwks(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.authentication.v1alpha1.Jwt)
}

::PROTOBUF_NAMESPACE_ID::uint8* Jwt::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:istio.authentication.v1alpha1.Jwt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string issuer = 1;
  if (this->issuer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->issuer().data(), static_cast<int>(this->issuer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.Jwt.issuer");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->issuer(), target);
  }

  // repeated string audiences = 2;
  for (int i = 0, n = this->audiences_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->audiences(i).data(), static_cast<int>(this->audiences(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.Jwt.audiences");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->audiences(i), target);
  }

  // string jwks_uri = 3;
  if (this->jwks_uri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->jwks_uri().data(), static_cast<int>(this->jwks_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.Jwt.jwks_uri");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->jwks_uri(), target);
  }

  // repeated string jwt_headers = 6;
  for (int i = 0, n = this->jwt_headers_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->jwt_headers(i).data(), static_cast<int>(this->jwt_headers(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.Jwt.jwt_headers");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(6, this->jwt_headers(i), target);
  }

  // repeated string jwt_params = 7;
  for (int i = 0, n = this->jwt_params_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->jwt_params(i).data(), static_cast<int>(this->jwt_params(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.Jwt.jwt_params");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(7, this->jwt_params(i), target);
  }

  // repeated .istio.authentication.v1alpha1.Jwt.TriggerRule trigger_rules = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trigger_rules_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->trigger_rules(static_cast<int>(i)), target);
  }

  // string jwks = 10;
  if (this->jwks().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->jwks().data(), static_cast<int>(this->jwks().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.Jwt.jwks");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->jwks(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.authentication.v1alpha1.Jwt)
  return target;
}

size_t Jwt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.authentication.v1alpha1.Jwt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string audiences = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->audiences_size());
  for (int i = 0, n = this->audiences_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->audiences(i));
  }

  // repeated string jwt_headers = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->jwt_headers_size());
  for (int i = 0, n = this->jwt_headers_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->jwt_headers(i));
  }

  // repeated string jwt_params = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->jwt_params_size());
  for (int i = 0, n = this->jwt_params_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->jwt_params(i));
  }

  // repeated .istio.authentication.v1alpha1.Jwt.TriggerRule trigger_rules = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->trigger_rules_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->trigger_rules(static_cast<int>(i)));
    }
  }

  // string issuer = 1;
  if (this->issuer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->issuer());
  }

  // string jwks_uri = 3;
  if (this->jwks_uri().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->jwks_uri());
  }

  // string jwks = 10;
  if (this->jwks().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->jwks());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Jwt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.authentication.v1alpha1.Jwt)
  GOOGLE_DCHECK_NE(&from, this);
  const Jwt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Jwt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.authentication.v1alpha1.Jwt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.authentication.v1alpha1.Jwt)
    MergeFrom(*source);
  }
}

void Jwt::MergeFrom(const Jwt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.authentication.v1alpha1.Jwt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  audiences_.MergeFrom(from.audiences_);
  jwt_headers_.MergeFrom(from.jwt_headers_);
  jwt_params_.MergeFrom(from.jwt_params_);
  trigger_rules_.MergeFrom(from.trigger_rules_);
  if (from.issuer().size() > 0) {

    issuer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.issuer_);
  }
  if (from.jwks_uri().size() > 0) {

    jwks_uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.jwks_uri_);
  }
  if (from.jwks().size() > 0) {

    jwks_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.jwks_);
  }
}

void Jwt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.authentication.v1alpha1.Jwt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Jwt::CopyFrom(const Jwt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.authentication.v1alpha1.Jwt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Jwt::IsInitialized() const {
  return true;
}

void Jwt::InternalSwap(Jwt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  audiences_.InternalSwap(CastToBase(&other->audiences_));
  jwt_headers_.InternalSwap(CastToBase(&other->jwt_headers_));
  jwt_params_.InternalSwap(CastToBase(&other->jwt_params_));
  CastToBase(&trigger_rules_)->InternalSwap(CastToBase(&other->trigger_rules_));
  issuer_.Swap(&other->issuer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  jwks_uri_.Swap(&other->jwks_uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  jwks_.Swap(&other->jwks_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Jwt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeerAuthenticationMethod::InitAsDefaultInstance() {
  ::istio::authentication::v1alpha1::_PeerAuthenticationMethod_default_instance_.mtls_ = const_cast< ::istio::authentication::v1alpha1::MutualTls*>(
      ::istio::authentication::v1alpha1::MutualTls::internal_default_instance());
  ::istio::authentication::v1alpha1::_PeerAuthenticationMethod_default_instance_.jwt_ = const_cast< ::istio::authentication::v1alpha1::Jwt*>(
      ::istio::authentication::v1alpha1::Jwt::internal_default_instance());
}
class PeerAuthenticationMethod::_Internal {
 public:
  static const ::istio::authentication::v1alpha1::MutualTls& mtls(const PeerAuthenticationMethod* msg);
  static const ::istio::authentication::v1alpha1::Jwt& jwt(const PeerAuthenticationMethod* msg);
};

const ::istio::authentication::v1alpha1::MutualTls&
PeerAuthenticationMethod::_Internal::mtls(const PeerAuthenticationMethod* msg) {
  return *msg->params_.mtls_;
}
const ::istio::authentication::v1alpha1::Jwt&
PeerAuthenticationMethod::_Internal::jwt(const PeerAuthenticationMethod* msg) {
  return *msg->params_.jwt_;
}
void PeerAuthenticationMethod::set_allocated_mtls(::istio::authentication::v1alpha1::MutualTls* mtls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_params();
  if (mtls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mtls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mtls, submessage_arena);
    }
    set_has_mtls();
    params_.mtls_ = mtls;
  }
  // @@protoc_insertion_point(field_set_allocated:istio.authentication.v1alpha1.PeerAuthenticationMethod.mtls)
}
void PeerAuthenticationMethod::set_allocated_jwt(::istio::authentication::v1alpha1::Jwt* jwt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_params();
  if (jwt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      jwt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jwt, submessage_arena);
    }
    set_has_jwt();
    params_.jwt_ = jwt;
  }
  // @@protoc_insertion_point(field_set_allocated:istio.authentication.v1alpha1.PeerAuthenticationMethod.jwt)
}
PeerAuthenticationMethod::PeerAuthenticationMethod()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.authentication.v1alpha1.PeerAuthenticationMethod)
}
PeerAuthenticationMethod::PeerAuthenticationMethod(const PeerAuthenticationMethod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_params();
  switch (from.params_case()) {
    case kMtls: {
      mutable_mtls()->::istio::authentication::v1alpha1::MutualTls::MergeFrom(from.mtls());
      break;
    }
    case kJwt: {
      mutable_jwt()->::istio::authentication::v1alpha1::Jwt::MergeFrom(from.jwt());
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:istio.authentication.v1alpha1.PeerAuthenticationMethod)
}

void PeerAuthenticationMethod::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerAuthenticationMethod_authentication_2fv1alpha1_2fpolicy_2eproto.base);
  clear_has_params();
}

PeerAuthenticationMethod::~PeerAuthenticationMethod() {
  // @@protoc_insertion_point(destructor:istio.authentication.v1alpha1.PeerAuthenticationMethod)
  SharedDtor();
}

void PeerAuthenticationMethod::SharedDtor() {
  if (has_params()) {
    clear_params();
  }
}

void PeerAuthenticationMethod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerAuthenticationMethod& PeerAuthenticationMethod::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerAuthenticationMethod_authentication_2fv1alpha1_2fpolicy_2eproto.base);
  return *internal_default_instance();
}


void PeerAuthenticationMethod::clear_params() {
// @@protoc_insertion_point(one_of_clear_start:istio.authentication.v1alpha1.PeerAuthenticationMethod)
  switch (params_case()) {
    case kMtls: {
      delete params_.mtls_;
      break;
    }
    case kJwt: {
      delete params_.jwt_;
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAMS_NOT_SET;
}


void PeerAuthenticationMethod::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.authentication.v1alpha1.PeerAuthenticationMethod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_params();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PeerAuthenticationMethod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .istio.authentication.v1alpha1.MutualTls mtls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_mtls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .istio.authentication.v1alpha1.Jwt jwt = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_jwt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PeerAuthenticationMethod::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.authentication.v1alpha1.PeerAuthenticationMethod)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.authentication.v1alpha1.MutualTls mtls = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mtls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.authentication.v1alpha1.Jwt jwt = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_jwt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.authentication.v1alpha1.PeerAuthenticationMethod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.authentication.v1alpha1.PeerAuthenticationMethod)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PeerAuthenticationMethod::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.authentication.v1alpha1.PeerAuthenticationMethod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.authentication.v1alpha1.MutualTls mtls = 1;
  if (has_mtls()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::mtls(this), output);
  }

  // .istio.authentication.v1alpha1.Jwt jwt = 2 [deprecated = true];
  if (has_jwt()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::jwt(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.authentication.v1alpha1.PeerAuthenticationMethod)
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerAuthenticationMethod::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:istio.authentication.v1alpha1.PeerAuthenticationMethod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.authentication.v1alpha1.MutualTls mtls = 1;
  if (has_mtls()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::mtls(this), target);
  }

  // .istio.authentication.v1alpha1.Jwt jwt = 2 [deprecated = true];
  if (has_jwt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::jwt(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.authentication.v1alpha1.PeerAuthenticationMethod)
  return target;
}

size_t PeerAuthenticationMethod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.authentication.v1alpha1.PeerAuthenticationMethod)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (params_case()) {
    // .istio.authentication.v1alpha1.MutualTls mtls = 1;
    case kMtls: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.mtls_);
      break;
    }
    // .istio.authentication.v1alpha1.Jwt jwt = 2 [deprecated = true];
    case kJwt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.jwt_);
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerAuthenticationMethod::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.authentication.v1alpha1.PeerAuthenticationMethod)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerAuthenticationMethod* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerAuthenticationMethod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.authentication.v1alpha1.PeerAuthenticationMethod)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.authentication.v1alpha1.PeerAuthenticationMethod)
    MergeFrom(*source);
  }
}

void PeerAuthenticationMethod::MergeFrom(const PeerAuthenticationMethod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.authentication.v1alpha1.PeerAuthenticationMethod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.params_case()) {
    case kMtls: {
      mutable_mtls()->::istio::authentication::v1alpha1::MutualTls::MergeFrom(from.mtls());
      break;
    }
    case kJwt: {
      mutable_jwt()->::istio::authentication::v1alpha1::Jwt::MergeFrom(from.jwt());
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
}

void PeerAuthenticationMethod::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.authentication.v1alpha1.PeerAuthenticationMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerAuthenticationMethod::CopyFrom(const PeerAuthenticationMethod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.authentication.v1alpha1.PeerAuthenticationMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerAuthenticationMethod::IsInitialized() const {
  return true;
}

void PeerAuthenticationMethod::InternalSwap(PeerAuthenticationMethod* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(params_, other->params_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerAuthenticationMethod::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OriginAuthenticationMethod::InitAsDefaultInstance() {
  ::istio::authentication::v1alpha1::_OriginAuthenticationMethod_default_instance_._instance.get_mutable()->jwt_ = const_cast< ::istio::authentication::v1alpha1::Jwt*>(
      ::istio::authentication::v1alpha1::Jwt::internal_default_instance());
}
class OriginAuthenticationMethod::_Internal {
 public:
  static const ::istio::authentication::v1alpha1::Jwt& jwt(const OriginAuthenticationMethod* msg);
};

const ::istio::authentication::v1alpha1::Jwt&
OriginAuthenticationMethod::_Internal::jwt(const OriginAuthenticationMethod* msg) {
  return *msg->jwt_;
}
OriginAuthenticationMethod::OriginAuthenticationMethod()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.authentication.v1alpha1.OriginAuthenticationMethod)
}
OriginAuthenticationMethod::OriginAuthenticationMethod(const OriginAuthenticationMethod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_jwt()) {
    jwt_ = new ::istio::authentication::v1alpha1::Jwt(*from.jwt_);
  } else {
    jwt_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:istio.authentication.v1alpha1.OriginAuthenticationMethod)
}

void OriginAuthenticationMethod::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OriginAuthenticationMethod_authentication_2fv1alpha1_2fpolicy_2eproto.base);
  jwt_ = nullptr;
}

OriginAuthenticationMethod::~OriginAuthenticationMethod() {
  // @@protoc_insertion_point(destructor:istio.authentication.v1alpha1.OriginAuthenticationMethod)
  SharedDtor();
}

void OriginAuthenticationMethod::SharedDtor() {
  if (this != internal_default_instance()) delete jwt_;
}

void OriginAuthenticationMethod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OriginAuthenticationMethod& OriginAuthenticationMethod::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OriginAuthenticationMethod_authentication_2fv1alpha1_2fpolicy_2eproto.base);
  return *internal_default_instance();
}


void OriginAuthenticationMethod::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.authentication.v1alpha1.OriginAuthenticationMethod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && jwt_ != nullptr) {
    delete jwt_;
  }
  jwt_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OriginAuthenticationMethod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .istio.authentication.v1alpha1.Jwt jwt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_jwt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OriginAuthenticationMethod::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.authentication.v1alpha1.OriginAuthenticationMethod)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.authentication.v1alpha1.Jwt jwt = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_jwt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.authentication.v1alpha1.OriginAuthenticationMethod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.authentication.v1alpha1.OriginAuthenticationMethod)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OriginAuthenticationMethod::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.authentication.v1alpha1.OriginAuthenticationMethod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.authentication.v1alpha1.Jwt jwt = 1;
  if (this->has_jwt()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::jwt(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.authentication.v1alpha1.OriginAuthenticationMethod)
}

::PROTOBUF_NAMESPACE_ID::uint8* OriginAuthenticationMethod::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:istio.authentication.v1alpha1.OriginAuthenticationMethod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.authentication.v1alpha1.Jwt jwt = 1;
  if (this->has_jwt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::jwt(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.authentication.v1alpha1.OriginAuthenticationMethod)
  return target;
}

size_t OriginAuthenticationMethod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.authentication.v1alpha1.OriginAuthenticationMethod)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .istio.authentication.v1alpha1.Jwt jwt = 1;
  if (this->has_jwt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *jwt_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OriginAuthenticationMethod::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.authentication.v1alpha1.OriginAuthenticationMethod)
  GOOGLE_DCHECK_NE(&from, this);
  const OriginAuthenticationMethod* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OriginAuthenticationMethod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.authentication.v1alpha1.OriginAuthenticationMethod)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.authentication.v1alpha1.OriginAuthenticationMethod)
    MergeFrom(*source);
  }
}

void OriginAuthenticationMethod::MergeFrom(const OriginAuthenticationMethod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.authentication.v1alpha1.OriginAuthenticationMethod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_jwt()) {
    mutable_jwt()->::istio::authentication::v1alpha1::Jwt::MergeFrom(from.jwt());
  }
}

void OriginAuthenticationMethod::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.authentication.v1alpha1.OriginAuthenticationMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OriginAuthenticationMethod::CopyFrom(const OriginAuthenticationMethod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.authentication.v1alpha1.OriginAuthenticationMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginAuthenticationMethod::IsInitialized() const {
  return true;
}

void OriginAuthenticationMethod::InternalSwap(OriginAuthenticationMethod* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(jwt_, other->jwt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OriginAuthenticationMethod::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Policy::InitAsDefaultInstance() {
}
class Policy::_Internal {
 public:
};

Policy::Policy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.authentication.v1alpha1.Policy)
}
Policy::Policy(const Policy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      targets_(from.targets_),
      peers_(from.peers_),
      origins_(from.origins_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&peer_is_optional_, &from.peer_is_optional_,
    static_cast<size_t>(reinterpret_cast<char*>(&principal_binding_) -
    reinterpret_cast<char*>(&peer_is_optional_)) + sizeof(principal_binding_));
  // @@protoc_insertion_point(copy_constructor:istio.authentication.v1alpha1.Policy)
}

void Policy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Policy_authentication_2fv1alpha1_2fpolicy_2eproto.base);
  ::memset(&peer_is_optional_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&principal_binding_) -
      reinterpret_cast<char*>(&peer_is_optional_)) + sizeof(principal_binding_));
}

Policy::~Policy() {
  // @@protoc_insertion_point(destructor:istio.authentication.v1alpha1.Policy)
  SharedDtor();
}

void Policy::SharedDtor() {
}

void Policy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Policy& Policy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Policy_authentication_2fv1alpha1_2fpolicy_2eproto.base);
  return *internal_default_instance();
}


void Policy::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.authentication.v1alpha1.Policy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targets_.Clear();
  peers_.Clear();
  origins_.Clear();
  ::memset(&peer_is_optional_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&principal_binding_) -
      reinterpret_cast<char*>(&peer_is_optional_)) + sizeof(principal_binding_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Policy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .istio.authentication.v1alpha1.TargetSelector targets = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .istio.authentication.v1alpha1.PeerAuthenticationMethod peers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // bool peer_is_optional = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          peer_is_optional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .istio.authentication.v1alpha1.OriginAuthenticationMethod origins = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_origins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // bool origin_is_optional = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          origin_is_optional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .istio.authentication.v1alpha1.PrincipalBinding principal_binding = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_principal_binding(static_cast<::istio::authentication::v1alpha1::PrincipalBinding>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Policy::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.authentication.v1alpha1.Policy)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .istio.authentication.v1alpha1.TargetSelector targets = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_targets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.authentication.v1alpha1.PeerAuthenticationMethod peers = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_peers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool peer_is_optional = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &peer_is_optional_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.authentication.v1alpha1.OriginAuthenticationMethod origins = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_origins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool origin_is_optional = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &origin_is_optional_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.authentication.v1alpha1.PrincipalBinding principal_binding = 6 [deprecated = true];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_principal_binding(static_cast< ::istio::authentication::v1alpha1::PrincipalBinding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.authentication.v1alpha1.Policy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.authentication.v1alpha1.Policy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Policy::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.authentication.v1alpha1.Policy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .istio.authentication.v1alpha1.TargetSelector targets = 1 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->targets_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->targets(static_cast<int>(i)),
      output);
  }

  // repeated .istio.authentication.v1alpha1.PeerAuthenticationMethod peers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->peers(static_cast<int>(i)),
      output);
  }

  // bool peer_is_optional = 3 [deprecated = true];
  if (this->peer_is_optional() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->peer_is_optional(), output);
  }

  // repeated .istio.authentication.v1alpha1.OriginAuthenticationMethod origins = 4 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->origins_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->origins(static_cast<int>(i)),
      output);
  }

  // bool origin_is_optional = 5 [deprecated = true];
  if (this->origin_is_optional() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->origin_is_optional(), output);
  }

  // .istio.authentication.v1alpha1.PrincipalBinding principal_binding = 6 [deprecated = true];
  if (this->principal_binding() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->principal_binding(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.authentication.v1alpha1.Policy)
}

::PROTOBUF_NAMESPACE_ID::uint8* Policy::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:istio.authentication.v1alpha1.Policy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .istio.authentication.v1alpha1.TargetSelector targets = 1 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->targets_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->targets(static_cast<int>(i)), target);
  }

  // repeated .istio.authentication.v1alpha1.PeerAuthenticationMethod peers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->peers(static_cast<int>(i)), target);
  }

  // bool peer_is_optional = 3 [deprecated = true];
  if (this->peer_is_optional() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->peer_is_optional(), target);
  }

  // repeated .istio.authentication.v1alpha1.OriginAuthenticationMethod origins = 4 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->origins_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->origins(static_cast<int>(i)), target);
  }

  // bool origin_is_optional = 5 [deprecated = true];
  if (this->origin_is_optional() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->origin_is_optional(), target);
  }

  // .istio.authentication.v1alpha1.PrincipalBinding principal_binding = 6 [deprecated = true];
  if (this->principal_binding() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->principal_binding(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.authentication.v1alpha1.Policy)
  return target;
}

size_t Policy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.authentication.v1alpha1.Policy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .istio.authentication.v1alpha1.TargetSelector targets = 1 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->targets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->targets(static_cast<int>(i)));
    }
  }

  // repeated .istio.authentication.v1alpha1.PeerAuthenticationMethod peers = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->peers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->peers(static_cast<int>(i)));
    }
  }

  // repeated .istio.authentication.v1alpha1.OriginAuthenticationMethod origins = 4 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->origins_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->origins(static_cast<int>(i)));
    }
  }

  // bool peer_is_optional = 3 [deprecated = true];
  if (this->peer_is_optional() != 0) {
    total_size += 1 + 1;
  }

  // bool origin_is_optional = 5 [deprecated = true];
  if (this->origin_is_optional() != 0) {
    total_size += 1 + 1;
  }

  // .istio.authentication.v1alpha1.PrincipalBinding principal_binding = 6 [deprecated = true];
  if (this->principal_binding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->principal_binding());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Policy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.authentication.v1alpha1.Policy)
  GOOGLE_DCHECK_NE(&from, this);
  const Policy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Policy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.authentication.v1alpha1.Policy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.authentication.v1alpha1.Policy)
    MergeFrom(*source);
  }
}

void Policy::MergeFrom(const Policy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.authentication.v1alpha1.Policy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  targets_.MergeFrom(from.targets_);
  peers_.MergeFrom(from.peers_);
  origins_.MergeFrom(from.origins_);
  if (from.peer_is_optional() != 0) {
    set_peer_is_optional(from.peer_is_optional());
  }
  if (from.origin_is_optional() != 0) {
    set_origin_is_optional(from.origin_is_optional());
  }
  if (from.principal_binding() != 0) {
    set_principal_binding(from.principal_binding());
  }
}

void Policy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.authentication.v1alpha1.Policy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Policy::CopyFrom(const Policy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.authentication.v1alpha1.Policy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Policy::IsInitialized() const {
  return true;
}

void Policy::InternalSwap(Policy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&targets_)->InternalSwap(CastToBase(&other->targets_));
  CastToBase(&peers_)->InternalSwap(CastToBase(&other->peers_));
  CastToBase(&origins_)->InternalSwap(CastToBase(&other->origins_));
  swap(peer_is_optional_, other->peer_is_optional_);
  swap(origin_is_optional_, other->origin_is_optional_);
  swap(principal_binding_, other->principal_binding_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Policy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TargetSelector::InitAsDefaultInstance() {
}
class TargetSelector::_Internal {
 public:
};

TargetSelector::TargetSelector()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.authentication.v1alpha1.TargetSelector)
}
TargetSelector::TargetSelector(const TargetSelector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ports_(from.ports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:istio.authentication.v1alpha1.TargetSelector)
}

void TargetSelector::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TargetSelector_authentication_2fv1alpha1_2fpolicy_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TargetSelector::~TargetSelector() {
  // @@protoc_insertion_point(destructor:istio.authentication.v1alpha1.TargetSelector)
  SharedDtor();
}

void TargetSelector::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TargetSelector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetSelector& TargetSelector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargetSelector_authentication_2fv1alpha1_2fpolicy_2eproto.base);
  return *internal_default_instance();
}


void TargetSelector::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.authentication.v1alpha1.TargetSelector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ports_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TargetSelector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "istio.authentication.v1alpha1.TargetSelector.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .istio.authentication.v1alpha1.PortSelector ports = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_ports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TargetSelector::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.authentication.v1alpha1.TargetSelector)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "istio.authentication.v1alpha1.TargetSelector.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.authentication.v1alpha1.PortSelector ports = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.authentication.v1alpha1.TargetSelector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.authentication.v1alpha1.TargetSelector)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TargetSelector::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.authentication.v1alpha1.TargetSelector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.TargetSelector.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .istio.authentication.v1alpha1.PortSelector ports = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ports_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->ports(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.authentication.v1alpha1.TargetSelector)
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetSelector::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:istio.authentication.v1alpha1.TargetSelector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.TargetSelector.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .istio.authentication.v1alpha1.PortSelector ports = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ports_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->ports(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.authentication.v1alpha1.TargetSelector)
  return target;
}

size_t TargetSelector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.authentication.v1alpha1.TargetSelector)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .istio.authentication.v1alpha1.PortSelector ports = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->ports_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ports(static_cast<int>(i)));
    }
  }

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetSelector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.authentication.v1alpha1.TargetSelector)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetSelector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetSelector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.authentication.v1alpha1.TargetSelector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.authentication.v1alpha1.TargetSelector)
    MergeFrom(*source);
  }
}

void TargetSelector::MergeFrom(const TargetSelector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.authentication.v1alpha1.TargetSelector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ports_.MergeFrom(from.ports_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void TargetSelector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.authentication.v1alpha1.TargetSelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetSelector::CopyFrom(const TargetSelector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.authentication.v1alpha1.TargetSelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetSelector::IsInitialized() const {
  return true;
}

void TargetSelector::InternalSwap(TargetSelector* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&ports_)->InternalSwap(CastToBase(&other->ports_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetSelector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PortSelector::InitAsDefaultInstance() {
  ::istio::authentication::v1alpha1::_PortSelector_default_instance_.number_ = 0u;
  ::istio::authentication::v1alpha1::_PortSelector_default_instance_.name_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class PortSelector::_Internal {
 public:
};

PortSelector::PortSelector()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.authentication.v1alpha1.PortSelector)
}
PortSelector::PortSelector(const PortSelector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_port();
  switch (from.port_case()) {
    case kNumber: {
      set_number(from.number());
      break;
    }
    case kName: {
      set_name(from.name());
      break;
    }
    case PORT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:istio.authentication.v1alpha1.PortSelector)
}

void PortSelector::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PortSelector_authentication_2fv1alpha1_2fpolicy_2eproto.base);
  clear_has_port();
}

PortSelector::~PortSelector() {
  // @@protoc_insertion_point(destructor:istio.authentication.v1alpha1.PortSelector)
  SharedDtor();
}

void PortSelector::SharedDtor() {
  if (has_port()) {
    clear_port();
  }
}

void PortSelector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PortSelector& PortSelector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PortSelector_authentication_2fv1alpha1_2fpolicy_2eproto.base);
  return *internal_default_instance();
}


void PortSelector::clear_port() {
// @@protoc_insertion_point(one_of_clear_start:istio.authentication.v1alpha1.PortSelector)
  switch (port_case()) {
    case kNumber: {
      // No need to clear
      break;
    }
    case kName: {
      port_.name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case PORT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PORT_NOT_SET;
}


void PortSelector::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.authentication.v1alpha1.PortSelector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_port();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PortSelector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          set_number(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "istio.authentication.v1alpha1.PortSelector.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PortSelector::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.authentication.v1alpha1.PortSelector)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 number = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          clear_port();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_.number_)));
          set_has_number();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "istio.authentication.v1alpha1.PortSelector.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.authentication.v1alpha1.PortSelector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.authentication.v1alpha1.PortSelector)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PortSelector::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.authentication.v1alpha1.PortSelector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number = 1;
  if (has_number()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->number(), output);
  }

  // string name = 2;
  if (has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.PortSelector.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.authentication.v1alpha1.PortSelector)
}

::PROTOBUF_NAMESPACE_ID::uint8* PortSelector::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:istio.authentication.v1alpha1.PortSelector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number = 1;
  if (has_number()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->number(), target);
  }

  // string name = 2;
  if (has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authentication.v1alpha1.PortSelector.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.authentication.v1alpha1.PortSelector)
  return target;
}

size_t PortSelector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.authentication.v1alpha1.PortSelector)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (port_case()) {
    // uint32 number = 1;
    case kNumber: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->number());
      break;
    }
    // string name = 2;
    case kName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    case PORT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PortSelector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.authentication.v1alpha1.PortSelector)
  GOOGLE_DCHECK_NE(&from, this);
  const PortSelector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PortSelector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.authentication.v1alpha1.PortSelector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.authentication.v1alpha1.PortSelector)
    MergeFrom(*source);
  }
}

void PortSelector::MergeFrom(const PortSelector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.authentication.v1alpha1.PortSelector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.port_case()) {
    case kNumber: {
      set_number(from.number());
      break;
    }
    case kName: {
      set_name(from.name());
      break;
    }
    case PORT_NOT_SET: {
      break;
    }
  }
}

void PortSelector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.authentication.v1alpha1.PortSelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortSelector::CopyFrom(const PortSelector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.authentication.v1alpha1.PortSelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortSelector::IsInitialized() const {
  return true;
}

void PortSelector::InternalSwap(PortSelector* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(port_, other->port_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PortSelector::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace authentication
}  // namespace istio
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::istio::authentication::v1alpha1::StringMatch* Arena::CreateMaybeMessage< ::istio::authentication::v1alpha1::StringMatch >(Arena* arena) {
  return Arena::CreateInternal< ::istio::authentication::v1alpha1::StringMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::istio::authentication::v1alpha1::MutualTls* Arena::CreateMaybeMessage< ::istio::authentication::v1alpha1::MutualTls >(Arena* arena) {
  return Arena::CreateInternal< ::istio::authentication::v1alpha1::MutualTls >(arena);
}
template<> PROTOBUF_NOINLINE ::istio::authentication::v1alpha1::Jwt_TriggerRule* Arena::CreateMaybeMessage< ::istio::authentication::v1alpha1::Jwt_TriggerRule >(Arena* arena) {
  return Arena::CreateInternal< ::istio::authentication::v1alpha1::Jwt_TriggerRule >(arena);
}
template<> PROTOBUF_NOINLINE ::istio::authentication::v1alpha1::Jwt* Arena::CreateMaybeMessage< ::istio::authentication::v1alpha1::Jwt >(Arena* arena) {
  return Arena::CreateInternal< ::istio::authentication::v1alpha1::Jwt >(arena);
}
template<> PROTOBUF_NOINLINE ::istio::authentication::v1alpha1::PeerAuthenticationMethod* Arena::CreateMaybeMessage< ::istio::authentication::v1alpha1::PeerAuthenticationMethod >(Arena* arena) {
  return Arena::CreateInternal< ::istio::authentication::v1alpha1::PeerAuthenticationMethod >(arena);
}
template<> PROTOBUF_NOINLINE ::istio::authentication::v1alpha1::OriginAuthenticationMethod* Arena::CreateMaybeMessage< ::istio::authentication::v1alpha1::OriginAuthenticationMethod >(Arena* arena) {
  return Arena::CreateInternal< ::istio::authentication::v1alpha1::OriginAuthenticationMethod >(arena);
}
template<> PROTOBUF_NOINLINE ::istio::authentication::v1alpha1::Policy* Arena::CreateMaybeMessage< ::istio::authentication::v1alpha1::Policy >(Arena* arena) {
  return Arena::CreateInternal< ::istio::authentication::v1alpha1::Policy >(arena);
}
template<> PROTOBUF_NOINLINE ::istio::authentication::v1alpha1::TargetSelector* Arena::CreateMaybeMessage< ::istio::authentication::v1alpha1::TargetSelector >(Arena* arena) {
  return Arena::CreateInternal< ::istio::authentication::v1alpha1::TargetSelector >(arena);
}
template<> PROTOBUF_NOINLINE ::istio::authentication::v1alpha1::PortSelector* Arena::CreateMaybeMessage< ::istio::authentication::v1alpha1::PortSelector >(Arena* arena) {
  return Arena::CreateInternal< ::istio::authentication::v1alpha1::PortSelector >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
