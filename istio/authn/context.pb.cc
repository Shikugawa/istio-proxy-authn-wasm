// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: istio/authn/context.proto

#include "istio/authn/context.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_istio_2fauthn_2fcontext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JwtPayload_istio_2fauthn_2fcontext_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_istio_2fauthn_2fcontext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_X509Payload_istio_2fauthn_2fcontext_2eproto;
namespace istio {
namespace authn {
class JwtPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JwtPayload> _instance;
} _JwtPayload_default_instance_;
class X509PayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<X509Payload> _instance;
} _X509Payload_default_instance_;
class PayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Payload> _instance;
  const ::istio::authn::X509Payload* x509_;
  const ::istio::authn::JwtPayload* jwt_;
} _Payload_default_instance_;
class ResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Result> _instance;
} _Result_default_instance_;
}  // namespace authn
}  // namespace istio
static void InitDefaultsscc_info_JwtPayload_istio_2fauthn_2fcontext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::istio::authn::_JwtPayload_default_instance_;
    new (ptr) ::istio::authn::JwtPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::authn::JwtPayload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JwtPayload_istio_2fauthn_2fcontext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_JwtPayload_istio_2fauthn_2fcontext_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_Payload_istio_2fauthn_2fcontext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::istio::authn::_Payload_default_instance_;
    new (ptr) ::istio::authn::Payload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::authn::Payload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Payload_istio_2fauthn_2fcontext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Payload_istio_2fauthn_2fcontext_2eproto}, {
      &scc_info_X509Payload_istio_2fauthn_2fcontext_2eproto.base,
      &scc_info_JwtPayload_istio_2fauthn_2fcontext_2eproto.base,}};

static void InitDefaultsscc_info_Result_istio_2fauthn_2fcontext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::istio::authn::_Result_default_instance_;
    new (ptr) ::istio::authn::Result();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::authn::Result::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Result_istio_2fauthn_2fcontext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Result_istio_2fauthn_2fcontext_2eproto}, {
      &scc_info_JwtPayload_istio_2fauthn_2fcontext_2eproto.base,}};

static void InitDefaultsscc_info_X509Payload_istio_2fauthn_2fcontext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::istio::authn::_X509Payload_default_instance_;
    new (ptr) ::istio::authn::X509Payload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::authn::X509Payload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_X509Payload_istio_2fauthn_2fcontext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_X509Payload_istio_2fauthn_2fcontext_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_istio_2fauthn_2fcontext_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_istio_2fauthn_2fcontext_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_istio_2fauthn_2fcontext_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_istio_2fauthn_2fcontext_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::istio::authn::JwtPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::istio::authn::JwtPayload, user_),
  PROTOBUF_FIELD_OFFSET(::istio::authn::JwtPayload, audiences_),
  PROTOBUF_FIELD_OFFSET(::istio::authn::JwtPayload, presenter_),
  PROTOBUF_FIELD_OFFSET(::istio::authn::JwtPayload, claims_),
  PROTOBUF_FIELD_OFFSET(::istio::authn::JwtPayload, raw_claims_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::istio::authn::X509Payload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::istio::authn::X509Payload, user_),
  PROTOBUF_FIELD_OFFSET(::istio::authn::X509Payload, trust_domains_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::istio::authn::Payload, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::istio::authn::Payload, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::istio::authn::PayloadDefaultTypeInternal, x509_),
  offsetof(::istio::authn::PayloadDefaultTypeInternal, jwt_),
  PROTOBUF_FIELD_OFFSET(::istio::authn::Payload, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::istio::authn::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::istio::authn::Result, principal_),
  PROTOBUF_FIELD_OFFSET(::istio::authn::Result, peer_user_),
  PROTOBUF_FIELD_OFFSET(::istio::authn::Result, origin_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::istio::authn::JwtPayload)},
  { 10, -1, sizeof(::istio::authn::X509Payload)},
  { 17, -1, sizeof(::istio::authn::Payload)},
  { 25, -1, sizeof(::istio::authn::Result)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::istio::authn::_JwtPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::istio::authn::_X509Payload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::istio::authn::_Payload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::istio::authn::_Result_default_instance_),
};

const char descriptor_table_protodef_istio_2fauthn_2fcontext_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031istio/authn/context.proto\022\013istio.authn"
  "\032\034google/protobuf/struct.proto\"}\n\nJwtPay"
  "load\022\014\n\004user\030\001 \001(\t\022\021\n\taudiences\030\002 \003(\t\022\021\n"
  "\tpresenter\030\003 \001(\t\022\'\n\006claims\030\005 \001(\0132\027.googl"
  "e.protobuf.Struct\022\022\n\nraw_claims\030\006 \001(\t\"2\n"
  "\013X509Payload\022\014\n\004user\030\001 \001(\t\022\025\n\rtrust_doma"
  "ins\030\002 \003(\t\"f\n\007Payload\022(\n\004x509\030\001 \001(\0132\030.ist"
  "io.authn.X509PayloadH\000\022&\n\003jwt\030\002 \001(\0132\027.is"
  "tio.authn.JwtPayloadH\000B\t\n\007payload\"W\n\006Res"
  "ult\022\021\n\tprincipal\030\001 \001(\t\022\021\n\tpeer_user\030\002 \001("
  "\t\022\'\n\006origin\030\003 \001(\0132\027.istio.authn.JwtPaylo"
  "adb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_istio_2fauthn_2fcontext_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_istio_2fauthn_2fcontext_2eproto_sccs[4] = {
  &scc_info_JwtPayload_istio_2fauthn_2fcontext_2eproto.base,
  &scc_info_Payload_istio_2fauthn_2fcontext_2eproto.base,
  &scc_info_Result_istio_2fauthn_2fcontext_2eproto.base,
  &scc_info_X509Payload_istio_2fauthn_2fcontext_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_istio_2fauthn_2fcontext_2eproto_once;
static bool descriptor_table_istio_2fauthn_2fcontext_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_istio_2fauthn_2fcontext_2eproto = {
  &descriptor_table_istio_2fauthn_2fcontext_2eproto_initialized, descriptor_table_protodef_istio_2fauthn_2fcontext_2eproto, "istio/authn/context.proto", 450,
  &descriptor_table_istio_2fauthn_2fcontext_2eproto_once, descriptor_table_istio_2fauthn_2fcontext_2eproto_sccs, descriptor_table_istio_2fauthn_2fcontext_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_istio_2fauthn_2fcontext_2eproto::offsets,
  file_level_metadata_istio_2fauthn_2fcontext_2eproto, 4, file_level_enum_descriptors_istio_2fauthn_2fcontext_2eproto, file_level_service_descriptors_istio_2fauthn_2fcontext_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_istio_2fauthn_2fcontext_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_istio_2fauthn_2fcontext_2eproto), true);
namespace istio {
namespace authn {

// ===================================================================

void JwtPayload::InitAsDefaultInstance() {
  ::istio::authn::_JwtPayload_default_instance_._instance.get_mutable()->claims_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class JwtPayload::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& claims(const JwtPayload* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
JwtPayload::_Internal::claims(const JwtPayload* msg) {
  return *msg->claims_;
}
void JwtPayload::clear_claims() {
  if (GetArenaNoVirtual() == nullptr && claims_ != nullptr) {
    delete claims_;
  }
  claims_ = nullptr;
}
JwtPayload::JwtPayload()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.authn.JwtPayload)
}
JwtPayload::JwtPayload(const JwtPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      audiences_(from.audiences_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.user().empty()) {
    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  presenter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.presenter().empty()) {
    presenter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.presenter_);
  }
  raw_claims_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.raw_claims().empty()) {
    raw_claims_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_claims_);
  }
  if (from.has_claims()) {
    claims_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.claims_);
  } else {
    claims_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:istio.authn.JwtPayload)
}

void JwtPayload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JwtPayload_istio_2fauthn_2fcontext_2eproto.base);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  presenter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_claims_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  claims_ = nullptr;
}

JwtPayload::~JwtPayload() {
  // @@protoc_insertion_point(destructor:istio.authn.JwtPayload)
  SharedDtor();
}

void JwtPayload::SharedDtor() {
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  presenter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_claims_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete claims_;
}

void JwtPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JwtPayload& JwtPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JwtPayload_istio_2fauthn_2fcontext_2eproto.base);
  return *internal_default_instance();
}


void JwtPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.authn.JwtPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audiences_.Clear();
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  presenter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_claims_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && claims_ != nullptr) {
    delete claims_;
  }
  claims_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JwtPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_user(), ptr, ctx, "istio.authn.JwtPayload.user");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string audiences = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_audiences(), ptr, ctx, "istio.authn.JwtPayload.audiences");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // string presenter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_presenter(), ptr, ctx, "istio.authn.JwtPayload.presenter");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct claims = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_claims(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string raw_claims = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_raw_claims(), ptr, ctx, "istio.authn.JwtPayload.raw_claims");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JwtPayload::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.authn.JwtPayload)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), static_cast<int>(this->user().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "istio.authn.JwtPayload.user"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string audiences = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_audiences()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->audiences(this->audiences_size() - 1).data(),
            static_cast<int>(this->audiences(this->audiences_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "istio.authn.JwtPayload.audiences"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string presenter = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_presenter()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->presenter().data(), static_cast<int>(this->presenter().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "istio.authn.JwtPayload.presenter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct claims = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_claims()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string raw_claims = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_claims()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->raw_claims().data(), static_cast<int>(this->raw_claims().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "istio.authn.JwtPayload.raw_claims"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.authn.JwtPayload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.authn.JwtPayload)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JwtPayload::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.authn.JwtPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (this->user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authn.JwtPayload.user");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // repeated string audiences = 2;
  for (int i = 0, n = this->audiences_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->audiences(i).data(), static_cast<int>(this->audiences(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authn.JwtPayload.audiences");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->audiences(i), output);
  }

  // string presenter = 3;
  if (this->presenter().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->presenter().data(), static_cast<int>(this->presenter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authn.JwtPayload.presenter");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->presenter(), output);
  }

  // .google.protobuf.Struct claims = 5;
  if (this->has_claims()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::claims(this), output);
  }

  // string raw_claims = 6;
  if (this->raw_claims().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->raw_claims().data(), static_cast<int>(this->raw_claims().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authn.JwtPayload.raw_claims");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->raw_claims(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.authn.JwtPayload)
}

::PROTOBUF_NAMESPACE_ID::uint8* JwtPayload::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:istio.authn.JwtPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (this->user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authn.JwtPayload.user");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // repeated string audiences = 2;
  for (int i = 0, n = this->audiences_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->audiences(i).data(), static_cast<int>(this->audiences(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authn.JwtPayload.audiences");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->audiences(i), target);
  }

  // string presenter = 3;
  if (this->presenter().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->presenter().data(), static_cast<int>(this->presenter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authn.JwtPayload.presenter");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->presenter(), target);
  }

  // .google.protobuf.Struct claims = 5;
  if (this->has_claims()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::claims(this), target);
  }

  // string raw_claims = 6;
  if (this->raw_claims().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->raw_claims().data(), static_cast<int>(this->raw_claims().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authn.JwtPayload.raw_claims");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->raw_claims(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.authn.JwtPayload)
  return target;
}

size_t JwtPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.authn.JwtPayload)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string audiences = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->audiences_size());
  for (int i = 0, n = this->audiences_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->audiences(i));
  }

  // string user = 1;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->user());
  }

  // string presenter = 3;
  if (this->presenter().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->presenter());
  }

  // string raw_claims = 6;
  if (this->raw_claims().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->raw_claims());
  }

  // .google.protobuf.Struct claims = 5;
  if (this->has_claims()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *claims_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JwtPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.authn.JwtPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const JwtPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JwtPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.authn.JwtPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.authn.JwtPayload)
    MergeFrom(*source);
  }
}

void JwtPayload::MergeFrom(const JwtPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.authn.JwtPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  audiences_.MergeFrom(from.audiences_);
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.presenter().size() > 0) {

    presenter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.presenter_);
  }
  if (from.raw_claims().size() > 0) {

    raw_claims_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_claims_);
  }
  if (from.has_claims()) {
    mutable_claims()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from.claims());
  }
}

void JwtPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.authn.JwtPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JwtPayload::CopyFrom(const JwtPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.authn.JwtPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JwtPayload::IsInitialized() const {
  return true;
}

void JwtPayload::InternalSwap(JwtPayload* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  audiences_.InternalSwap(CastToBase(&other->audiences_));
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  presenter_.Swap(&other->presenter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  raw_claims_.Swap(&other->raw_claims_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(claims_, other->claims_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JwtPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void X509Payload::InitAsDefaultInstance() {
}
class X509Payload::_Internal {
 public:
};

X509Payload::X509Payload()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.authn.X509Payload)
}
X509Payload::X509Payload(const X509Payload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      trust_domains_(from.trust_domains_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.user().empty()) {
    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  // @@protoc_insertion_point(copy_constructor:istio.authn.X509Payload)
}

void X509Payload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_X509Payload_istio_2fauthn_2fcontext_2eproto.base);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

X509Payload::~X509Payload() {
  // @@protoc_insertion_point(destructor:istio.authn.X509Payload)
  SharedDtor();
}

void X509Payload::SharedDtor() {
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void X509Payload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const X509Payload& X509Payload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_X509Payload_istio_2fauthn_2fcontext_2eproto.base);
  return *internal_default_instance();
}


void X509Payload::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.authn.X509Payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trust_domains_.Clear();
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* X509Payload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_user(), ptr, ctx, "istio.authn.X509Payload.user");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string trust_domains = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_trust_domains(), ptr, ctx, "istio.authn.X509Payload.trust_domains");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool X509Payload::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.authn.X509Payload)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), static_cast<int>(this->user().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "istio.authn.X509Payload.user"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string trust_domains = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_trust_domains()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trust_domains(this->trust_domains_size() - 1).data(),
            static_cast<int>(this->trust_domains(this->trust_domains_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "istio.authn.X509Payload.trust_domains"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.authn.X509Payload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.authn.X509Payload)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void X509Payload::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.authn.X509Payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (this->user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authn.X509Payload.user");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // repeated string trust_domains = 2;
  for (int i = 0, n = this->trust_domains_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trust_domains(i).data(), static_cast<int>(this->trust_domains(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authn.X509Payload.trust_domains");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->trust_domains(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.authn.X509Payload)
}

::PROTOBUF_NAMESPACE_ID::uint8* X509Payload::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:istio.authn.X509Payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (this->user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authn.X509Payload.user");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // repeated string trust_domains = 2;
  for (int i = 0, n = this->trust_domains_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trust_domains(i).data(), static_cast<int>(this->trust_domains(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authn.X509Payload.trust_domains");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->trust_domains(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.authn.X509Payload)
  return target;
}

size_t X509Payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.authn.X509Payload)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string trust_domains = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->trust_domains_size());
  for (int i = 0, n = this->trust_domains_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->trust_domains(i));
  }

  // string user = 1;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->user());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void X509Payload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.authn.X509Payload)
  GOOGLE_DCHECK_NE(&from, this);
  const X509Payload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<X509Payload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.authn.X509Payload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.authn.X509Payload)
    MergeFrom(*source);
  }
}

void X509Payload::MergeFrom(const X509Payload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.authn.X509Payload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trust_domains_.MergeFrom(from.trust_domains_);
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
}

void X509Payload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.authn.X509Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X509Payload::CopyFrom(const X509Payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.authn.X509Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X509Payload::IsInitialized() const {
  return true;
}

void X509Payload::InternalSwap(X509Payload* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  trust_domains_.InternalSwap(CastToBase(&other->trust_domains_));
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata X509Payload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Payload::InitAsDefaultInstance() {
  ::istio::authn::_Payload_default_instance_.x509_ = const_cast< ::istio::authn::X509Payload*>(
      ::istio::authn::X509Payload::internal_default_instance());
  ::istio::authn::_Payload_default_instance_.jwt_ = const_cast< ::istio::authn::JwtPayload*>(
      ::istio::authn::JwtPayload::internal_default_instance());
}
class Payload::_Internal {
 public:
  static const ::istio::authn::X509Payload& x509(const Payload* msg);
  static const ::istio::authn::JwtPayload& jwt(const Payload* msg);
};

const ::istio::authn::X509Payload&
Payload::_Internal::x509(const Payload* msg) {
  return *msg->payload_.x509_;
}
const ::istio::authn::JwtPayload&
Payload::_Internal::jwt(const Payload* msg) {
  return *msg->payload_.jwt_;
}
void Payload::set_allocated_x509(::istio::authn::X509Payload* x509) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (x509) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      x509 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, x509, submessage_arena);
    }
    set_has_x509();
    payload_.x509_ = x509;
  }
  // @@protoc_insertion_point(field_set_allocated:istio.authn.Payload.x509)
}
void Payload::set_allocated_jwt(::istio::authn::JwtPayload* jwt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (jwt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      jwt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jwt, submessage_arena);
    }
    set_has_jwt();
    payload_.jwt_ = jwt;
  }
  // @@protoc_insertion_point(field_set_allocated:istio.authn.Payload.jwt)
}
Payload::Payload()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.authn.Payload)
}
Payload::Payload(const Payload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kX509: {
      mutable_x509()->::istio::authn::X509Payload::MergeFrom(from.x509());
      break;
    }
    case kJwt: {
      mutable_jwt()->::istio::authn::JwtPayload::MergeFrom(from.jwt());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:istio.authn.Payload)
}

void Payload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Payload_istio_2fauthn_2fcontext_2eproto.base);
  clear_has_payload();
}

Payload::~Payload() {
  // @@protoc_insertion_point(destructor:istio.authn.Payload)
  SharedDtor();
}

void Payload::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void Payload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Payload& Payload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Payload_istio_2fauthn_2fcontext_2eproto.base);
  return *internal_default_instance();
}


void Payload::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:istio.authn.Payload)
  switch (payload_case()) {
    case kX509: {
      delete payload_.x509_;
      break;
    }
    case kJwt: {
      delete payload_.jwt_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Payload::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.authn.Payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Payload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .istio.authn.X509Payload x509 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_x509(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .istio.authn.JwtPayload jwt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_jwt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Payload::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.authn.Payload)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.authn.X509Payload x509 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_x509()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.authn.JwtPayload jwt = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_jwt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.authn.Payload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.authn.Payload)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Payload::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.authn.Payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.authn.X509Payload x509 = 1;
  if (has_x509()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::x509(this), output);
  }

  // .istio.authn.JwtPayload jwt = 2;
  if (has_jwt()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::jwt(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.authn.Payload)
}

::PROTOBUF_NAMESPACE_ID::uint8* Payload::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:istio.authn.Payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.authn.X509Payload x509 = 1;
  if (has_x509()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::x509(this), target);
  }

  // .istio.authn.JwtPayload jwt = 2;
  if (has_jwt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::jwt(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.authn.Payload)
  return target;
}

size_t Payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.authn.Payload)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .istio.authn.X509Payload x509 = 1;
    case kX509: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.x509_);
      break;
    }
    // .istio.authn.JwtPayload jwt = 2;
    case kJwt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.jwt_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Payload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.authn.Payload)
  GOOGLE_DCHECK_NE(&from, this);
  const Payload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Payload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.authn.Payload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.authn.Payload)
    MergeFrom(*source);
  }
}

void Payload::MergeFrom(const Payload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.authn.Payload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kX509: {
      mutable_x509()->::istio::authn::X509Payload::MergeFrom(from.x509());
      break;
    }
    case kJwt: {
      mutable_jwt()->::istio::authn::JwtPayload::MergeFrom(from.jwt());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Payload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.authn.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Payload::CopyFrom(const Payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.authn.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload::IsInitialized() const {
  return true;
}

void Payload::InternalSwap(Payload* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Payload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Result::InitAsDefaultInstance() {
  ::istio::authn::_Result_default_instance_._instance.get_mutable()->origin_ = const_cast< ::istio::authn::JwtPayload*>(
      ::istio::authn::JwtPayload::internal_default_instance());
}
class Result::_Internal {
 public:
  static const ::istio::authn::JwtPayload& origin(const Result* msg);
};

const ::istio::authn::JwtPayload&
Result::_Internal::origin(const Result* msg) {
  return *msg->origin_;
}
Result::Result()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.authn.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  principal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.principal().empty()) {
    principal_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.principal_);
  }
  peer_user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.peer_user().empty()) {
    peer_user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_user_);
  }
  if (from.has_origin()) {
    origin_ = new ::istio::authn::JwtPayload(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:istio.authn.Result)
}

void Result::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Result_istio_2fauthn_2fcontext_2eproto.base);
  principal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  origin_ = nullptr;
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:istio.authn.Result)
  SharedDtor();
}

void Result::SharedDtor() {
  principal_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete origin_;
}

void Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Result& Result::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Result_istio_2fauthn_2fcontext_2eproto.base);
  return *internal_default_instance();
}


void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.authn.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  principal_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string principal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_principal(), ptr, ctx, "istio.authn.Result.principal");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string peer_user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_peer_user(), ptr, ctx, "istio.authn.Result.peer_user");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .istio.authn.JwtPayload origin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Result::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.authn.Result)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string principal = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_principal()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->principal().data(), static_cast<int>(this->principal().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "istio.authn.Result.principal"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string peer_user = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_user()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->peer_user().data(), static_cast<int>(this->peer_user().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "istio.authn.Result.peer_user"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.authn.JwtPayload origin = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.authn.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.authn.Result)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Result::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.authn.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string principal = 1;
  if (this->principal().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->principal().data(), static_cast<int>(this->principal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authn.Result.principal");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->principal(), output);
  }

  // string peer_user = 2;
  if (this->peer_user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->peer_user().data(), static_cast<int>(this->peer_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authn.Result.peer_user");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->peer_user(), output);
  }

  // .istio.authn.JwtPayload origin = 3;
  if (this->has_origin()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::origin(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.authn.Result)
}

::PROTOBUF_NAMESPACE_ID::uint8* Result::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:istio.authn.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string principal = 1;
  if (this->principal().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->principal().data(), static_cast<int>(this->principal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authn.Result.principal");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->principal(), target);
  }

  // string peer_user = 2;
  if (this->peer_user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->peer_user().data(), static_cast<int>(this->peer_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "istio.authn.Result.peer_user");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->peer_user(), target);
  }

  // .istio.authn.JwtPayload origin = 3;
  if (this->has_origin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::origin(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.authn.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.authn.Result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string principal = 1;
  if (this->principal().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->principal());
  }

  // string peer_user = 2;
  if (this->peer_user().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->peer_user());
  }

  // .istio.authn.JwtPayload origin = 3;
  if (this->has_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.authn.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.authn.Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.authn.Result)
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.authn.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.principal().size() > 0) {

    principal_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.principal_);
  }
  if (from.peer_user().size() > 0) {

    peer_user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_user_);
  }
  if (from.has_origin()) {
    mutable_origin()->::istio::authn::JwtPayload::MergeFrom(from.origin());
  }
}

void Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.authn.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.authn.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  principal_.Swap(&other->principal_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  peer_user_.Swap(&other->peer_user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(origin_, other->origin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace authn
}  // namespace istio
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::istio::authn::JwtPayload* Arena::CreateMaybeMessage< ::istio::authn::JwtPayload >(Arena* arena) {
  return Arena::CreateInternal< ::istio::authn::JwtPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::istio::authn::X509Payload* Arena::CreateMaybeMessage< ::istio::authn::X509Payload >(Arena* arena) {
  return Arena::CreateInternal< ::istio::authn::X509Payload >(arena);
}
template<> PROTOBUF_NOINLINE ::istio::authn::Payload* Arena::CreateMaybeMessage< ::istio::authn::Payload >(Arena* arena) {
  return Arena::CreateInternal< ::istio::authn::Payload >(arena);
}
template<> PROTOBUF_NOINLINE ::istio::authn::Result* Arena::CreateMaybeMessage< ::istio::authn::Result >(Arena* arena) {
  return Arena::CreateInternal< ::istio::authn::Result >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
