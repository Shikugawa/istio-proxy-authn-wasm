// Copyright 2018 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

package istio.authn;

import "google/protobuf/struct.proto";

// Container to hold authenticated attributes from JWT.
message JwtPayload {
  // This is a string of the issuer (iss) and subject (sub) claims within a
  // JWT concatenated with “/” with a percent-encoded subject value. Example
  // accounts.my-svc.com/104958560606
  string user = 1;

  // The intended audience(s) for this authentication information. This should
  // reflect the audience (aud) claim within a JWT. Example
  // [‘my-svc.com’, ‘scopes/read’]
  repeated string audiences = 2;

  // The authorized presenter of the credential. This value should reflect the
  // optional Authorized Presenter (azp) claim within a JWT or the OAuth2 client
  // id. Example 123456789012.my-svc.com
  string presenter = 3;

  // JWT claims stored as protobuf.Struct
  // Only string and string-list claims are extracted into claims.
  // A string claim is stored as a string list of one item.
  google.protobuf.Struct claims = 5;

  // All original claims in JsonString format, which can be parsed into json
  // object (map) to access other claims that not cover with the string claims
  // map above.
  string raw_claims = 6;
}

// Container to hold authenticated attributes from X509 (mTLS).
message X509Payload {
  // Identity carries by X509 certification. This is extracted from SAN field
  // for Istio provided certificate.
  string user = 1;

  // The trust domain corresponds to the trust root of a system.
  // Refer to
  // [SPIFFE-ID](https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE-ID.md#21-trust-domain)
  // The `trust_domains` field contains a list of trust domains. A request from
  // `serviceA` to `serviceB` is accepted at `serviceB` if `serviceA` carries a
  // valid x509 cerficicate with the trust domain from the trust_domains list.
  // The `trust_domains` field should not be empty. It should contain at least
  // one trust domain.
  repeated string trust_domains = 2;
};

message Payload {
  oneof payload {
    X509Payload x509 = 1;
    JwtPayload jwt = 2;
  }
}
message Result {
  // Principal is set according to policy credential rule, from the peer
  // identity (peer_user) or origin identity (origin.user).
  string principal = 1;

  // Peer identity, result from peer authentication (for now, peer
  // authentication outputs only identity). This is corresponding to
  // Istio source.user Istio attribute
  // (https://istio.io/docs/reference/config/mixer/attribute-vocabulary.html)
  string peer_user = 2;

  // Origin authentication supports only JWT at the moment, so we can use
  // JwtPayload for origin authenticated attributes.
  JwtPayload origin = 3;
}
