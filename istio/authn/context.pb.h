// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: istio/authn/context.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_istio_2fauthn_2fcontext_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_istio_2fauthn_2fcontext_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_istio_2fauthn_2fcontext_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_istio_2fauthn_2fcontext_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_istio_2fauthn_2fcontext_2eproto;
namespace istio {
namespace authn {
class JwtPayload;
class JwtPayloadDefaultTypeInternal;
extern JwtPayloadDefaultTypeInternal _JwtPayload_default_instance_;
class Payload;
class PayloadDefaultTypeInternal;
extern PayloadDefaultTypeInternal _Payload_default_instance_;
class Result;
class ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class X509Payload;
class X509PayloadDefaultTypeInternal;
extern X509PayloadDefaultTypeInternal _X509Payload_default_instance_;
}  // namespace authn
}  // namespace istio
PROTOBUF_NAMESPACE_OPEN
template<> ::istio::authn::JwtPayload* Arena::CreateMaybeMessage<::istio::authn::JwtPayload>(Arena*);
template<> ::istio::authn::Payload* Arena::CreateMaybeMessage<::istio::authn::Payload>(Arena*);
template<> ::istio::authn::Result* Arena::CreateMaybeMessage<::istio::authn::Result>(Arena*);
template<> ::istio::authn::X509Payload* Arena::CreateMaybeMessage<::istio::authn::X509Payload>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace istio {
namespace authn {

// ===================================================================

class JwtPayload :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:istio.authn.JwtPayload) */ {
 public:
  JwtPayload();
  virtual ~JwtPayload();

  JwtPayload(const JwtPayload& from);
  JwtPayload(JwtPayload&& from) noexcept
    : JwtPayload() {
    *this = ::std::move(from);
  }

  inline JwtPayload& operator=(const JwtPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline JwtPayload& operator=(JwtPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JwtPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JwtPayload* internal_default_instance() {
    return reinterpret_cast<const JwtPayload*>(
               &_JwtPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JwtPayload& a, JwtPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(JwtPayload* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JwtPayload* New() const final {
    return CreateMaybeMessage<JwtPayload>(nullptr);
  }

  JwtPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JwtPayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JwtPayload& from);
  void MergeFrom(const JwtPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JwtPayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "istio.authn.JwtPayload";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_istio_2fauthn_2fcontext_2eproto);
    return ::descriptor_table_istio_2fauthn_2fcontext_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudiencesFieldNumber = 2,
    kUserFieldNumber = 1,
    kPresenterFieldNumber = 3,
    kRawClaimsFieldNumber = 6,
    kClaimsFieldNumber = 5,
  };
  // repeated string audiences = 2;
  int audiences_size() const;
  void clear_audiences();
  const std::string& audiences(int index) const;
  std::string* mutable_audiences(int index);
  void set_audiences(int index, const std::string& value);
  void set_audiences(int index, std::string&& value);
  void set_audiences(int index, const char* value);
  void set_audiences(int index, const char* value, size_t size);
  std::string* add_audiences();
  void add_audiences(const std::string& value);
  void add_audiences(std::string&& value);
  void add_audiences(const char* value);
  void add_audiences(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& audiences() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_audiences();

  // string user = 1;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);

  // string presenter = 3;
  void clear_presenter();
  const std::string& presenter() const;
  void set_presenter(const std::string& value);
  void set_presenter(std::string&& value);
  void set_presenter(const char* value);
  void set_presenter(const char* value, size_t size);
  std::string* mutable_presenter();
  std::string* release_presenter();
  void set_allocated_presenter(std::string* presenter);

  // string raw_claims = 6;
  void clear_raw_claims();
  const std::string& raw_claims() const;
  void set_raw_claims(const std::string& value);
  void set_raw_claims(std::string&& value);
  void set_raw_claims(const char* value);
  void set_raw_claims(const char* value, size_t size);
  std::string* mutable_raw_claims();
  std::string* release_raw_claims();
  void set_allocated_raw_claims(std::string* raw_claims);

  // .google.protobuf.Struct claims = 5;
  bool has_claims() const;
  void clear_claims();
  const PROTOBUF_NAMESPACE_ID::Struct& claims() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_claims();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_claims();
  void set_allocated_claims(PROTOBUF_NAMESPACE_ID::Struct* claims);

  // @@protoc_insertion_point(class_scope:istio.authn.JwtPayload)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> audiences_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr presenter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_claims_;
  PROTOBUF_NAMESPACE_ID::Struct* claims_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_istio_2fauthn_2fcontext_2eproto;
};
// -------------------------------------------------------------------

class X509Payload :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:istio.authn.X509Payload) */ {
 public:
  X509Payload();
  virtual ~X509Payload();

  X509Payload(const X509Payload& from);
  X509Payload(X509Payload&& from) noexcept
    : X509Payload() {
    *this = ::std::move(from);
  }

  inline X509Payload& operator=(const X509Payload& from) {
    CopyFrom(from);
    return *this;
  }
  inline X509Payload& operator=(X509Payload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const X509Payload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const X509Payload* internal_default_instance() {
    return reinterpret_cast<const X509Payload*>(
               &_X509Payload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(X509Payload& a, X509Payload& b) {
    a.Swap(&b);
  }
  inline void Swap(X509Payload* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline X509Payload* New() const final {
    return CreateMaybeMessage<X509Payload>(nullptr);
  }

  X509Payload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<X509Payload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const X509Payload& from);
  void MergeFrom(const X509Payload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(X509Payload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "istio.authn.X509Payload";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_istio_2fauthn_2fcontext_2eproto);
    return ::descriptor_table_istio_2fauthn_2fcontext_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrustDomainsFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // repeated string trust_domains = 2;
  int trust_domains_size() const;
  void clear_trust_domains();
  const std::string& trust_domains(int index) const;
  std::string* mutable_trust_domains(int index);
  void set_trust_domains(int index, const std::string& value);
  void set_trust_domains(int index, std::string&& value);
  void set_trust_domains(int index, const char* value);
  void set_trust_domains(int index, const char* value, size_t size);
  std::string* add_trust_domains();
  void add_trust_domains(const std::string& value);
  void add_trust_domains(std::string&& value);
  void add_trust_domains(const char* value);
  void add_trust_domains(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& trust_domains() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_trust_domains();

  // string user = 1;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);

  // @@protoc_insertion_point(class_scope:istio.authn.X509Payload)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> trust_domains_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_istio_2fauthn_2fcontext_2eproto;
};
// -------------------------------------------------------------------

class Payload :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:istio.authn.Payload) */ {
 public:
  Payload();
  virtual ~Payload();

  Payload(const Payload& from);
  Payload(Payload&& from) noexcept
    : Payload() {
    *this = ::std::move(from);
  }

  inline Payload& operator=(const Payload& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload& operator=(Payload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Payload& default_instance();

  enum PayloadCase {
    kX509 = 1,
    kJwt = 2,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Payload* internal_default_instance() {
    return reinterpret_cast<const Payload*>(
               &_Payload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Payload& a, Payload& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payload* New() const final {
    return CreateMaybeMessage<Payload>(nullptr);
  }

  Payload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Payload& from);
  void MergeFrom(const Payload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "istio.authn.Payload";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_istio_2fauthn_2fcontext_2eproto);
    return ::descriptor_table_istio_2fauthn_2fcontext_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kX509FieldNumber = 1,
    kJwtFieldNumber = 2,
  };
  // .istio.authn.X509Payload x509 = 1;
  bool has_x509() const;
  void clear_x509();
  const ::istio::authn::X509Payload& x509() const;
  ::istio::authn::X509Payload* release_x509();
  ::istio::authn::X509Payload* mutable_x509();
  void set_allocated_x509(::istio::authn::X509Payload* x509);

  // .istio.authn.JwtPayload jwt = 2;
  bool has_jwt() const;
  void clear_jwt();
  const ::istio::authn::JwtPayload& jwt() const;
  ::istio::authn::JwtPayload* release_jwt();
  ::istio::authn::JwtPayload* mutable_jwt();
  void set_allocated_jwt(::istio::authn::JwtPayload* jwt);

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:istio.authn.Payload)
 private:
  class _Internal;
  void set_has_x509();
  void set_has_jwt();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union PayloadUnion {
    PayloadUnion() {}
    ::istio::authn::X509Payload* x509_;
    ::istio::authn::JwtPayload* jwt_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_istio_2fauthn_2fcontext_2eproto;
};
// -------------------------------------------------------------------

class Result :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:istio.authn.Result) */ {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(nullptr);
  }

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "istio.authn.Result";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_istio_2fauthn_2fcontext_2eproto);
    return ::descriptor_table_istio_2fauthn_2fcontext_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrincipalFieldNumber = 1,
    kPeerUserFieldNumber = 2,
    kOriginFieldNumber = 3,
  };
  // string principal = 1;
  void clear_principal();
  const std::string& principal() const;
  void set_principal(const std::string& value);
  void set_principal(std::string&& value);
  void set_principal(const char* value);
  void set_principal(const char* value, size_t size);
  std::string* mutable_principal();
  std::string* release_principal();
  void set_allocated_principal(std::string* principal);

  // string peer_user = 2;
  void clear_peer_user();
  const std::string& peer_user() const;
  void set_peer_user(const std::string& value);
  void set_peer_user(std::string&& value);
  void set_peer_user(const char* value);
  void set_peer_user(const char* value, size_t size);
  std::string* mutable_peer_user();
  std::string* release_peer_user();
  void set_allocated_peer_user(std::string* peer_user);

  // .istio.authn.JwtPayload origin = 3;
  bool has_origin() const;
  void clear_origin();
  const ::istio::authn::JwtPayload& origin() const;
  ::istio::authn::JwtPayload* release_origin();
  ::istio::authn::JwtPayload* mutable_origin();
  void set_allocated_origin(::istio::authn::JwtPayload* origin);

  // @@protoc_insertion_point(class_scope:istio.authn.Result)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr principal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_user_;
  ::istio::authn::JwtPayload* origin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_istio_2fauthn_2fcontext_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JwtPayload

// string user = 1;
inline void JwtPayload::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& JwtPayload::user() const {
  // @@protoc_insertion_point(field_get:istio.authn.JwtPayload.user)
  return user_.GetNoArena();
}
inline void JwtPayload::set_user(const std::string& value) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.authn.JwtPayload.user)
}
inline void JwtPayload::set_user(std::string&& value) {
  
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.authn.JwtPayload.user)
}
inline void JwtPayload::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.authn.JwtPayload.user)
}
inline void JwtPayload::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.authn.JwtPayload.user)
}
inline std::string* JwtPayload::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:istio.authn.JwtPayload.user)
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JwtPayload::release_user() {
  // @@protoc_insertion_point(field_release:istio.authn.JwtPayload.user)
  
  return user_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JwtPayload::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:istio.authn.JwtPayload.user)
}

// repeated string audiences = 2;
inline int JwtPayload::audiences_size() const {
  return audiences_.size();
}
inline void JwtPayload::clear_audiences() {
  audiences_.Clear();
}
inline const std::string& JwtPayload::audiences(int index) const {
  // @@protoc_insertion_point(field_get:istio.authn.JwtPayload.audiences)
  return audiences_.Get(index);
}
inline std::string* JwtPayload::mutable_audiences(int index) {
  // @@protoc_insertion_point(field_mutable:istio.authn.JwtPayload.audiences)
  return audiences_.Mutable(index);
}
inline void JwtPayload::set_audiences(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:istio.authn.JwtPayload.audiences)
  audiences_.Mutable(index)->assign(value);
}
inline void JwtPayload::set_audiences(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.authn.JwtPayload.audiences)
  audiences_.Mutable(index)->assign(std::move(value));
}
inline void JwtPayload::set_audiences(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  audiences_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.authn.JwtPayload.audiences)
}
inline void JwtPayload::set_audiences(int index, const char* value, size_t size) {
  audiences_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.authn.JwtPayload.audiences)
}
inline std::string* JwtPayload::add_audiences() {
  // @@protoc_insertion_point(field_add_mutable:istio.authn.JwtPayload.audiences)
  return audiences_.Add();
}
inline void JwtPayload::add_audiences(const std::string& value) {
  audiences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.authn.JwtPayload.audiences)
}
inline void JwtPayload::add_audiences(std::string&& value) {
  audiences_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.authn.JwtPayload.audiences)
}
inline void JwtPayload::add_audiences(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  audiences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.authn.JwtPayload.audiences)
}
inline void JwtPayload::add_audiences(const char* value, size_t size) {
  audiences_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.authn.JwtPayload.audiences)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JwtPayload::audiences() const {
  // @@protoc_insertion_point(field_list:istio.authn.JwtPayload.audiences)
  return audiences_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JwtPayload::mutable_audiences() {
  // @@protoc_insertion_point(field_mutable_list:istio.authn.JwtPayload.audiences)
  return &audiences_;
}

// string presenter = 3;
inline void JwtPayload::clear_presenter() {
  presenter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& JwtPayload::presenter() const {
  // @@protoc_insertion_point(field_get:istio.authn.JwtPayload.presenter)
  return presenter_.GetNoArena();
}
inline void JwtPayload::set_presenter(const std::string& value) {
  
  presenter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.authn.JwtPayload.presenter)
}
inline void JwtPayload::set_presenter(std::string&& value) {
  
  presenter_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.authn.JwtPayload.presenter)
}
inline void JwtPayload::set_presenter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  presenter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.authn.JwtPayload.presenter)
}
inline void JwtPayload::set_presenter(const char* value, size_t size) {
  
  presenter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.authn.JwtPayload.presenter)
}
inline std::string* JwtPayload::mutable_presenter() {
  
  // @@protoc_insertion_point(field_mutable:istio.authn.JwtPayload.presenter)
  return presenter_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JwtPayload::release_presenter() {
  // @@protoc_insertion_point(field_release:istio.authn.JwtPayload.presenter)
  
  return presenter_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JwtPayload::set_allocated_presenter(std::string* presenter) {
  if (presenter != nullptr) {
    
  } else {
    
  }
  presenter_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), presenter);
  // @@protoc_insertion_point(field_set_allocated:istio.authn.JwtPayload.presenter)
}

// .google.protobuf.Struct claims = 5;
inline bool JwtPayload::has_claims() const {
  return this != internal_default_instance() && claims_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Struct& JwtPayload::claims() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = claims_;
  // @@protoc_insertion_point(field_get:istio.authn.JwtPayload.claims)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Struct* JwtPayload::release_claims() {
  // @@protoc_insertion_point(field_release:istio.authn.JwtPayload.claims)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = claims_;
  claims_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* JwtPayload::mutable_claims() {
  
  if (claims_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    claims_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.authn.JwtPayload.claims)
  return claims_;
}
inline void JwtPayload::set_allocated_claims(PROTOBUF_NAMESPACE_ID::Struct* claims) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(claims_);
  }
  if (claims) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(claims)->GetArena();
    if (message_arena != submessage_arena) {
      claims = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, claims, submessage_arena);
    }
    
  } else {
    
  }
  claims_ = claims;
  // @@protoc_insertion_point(field_set_allocated:istio.authn.JwtPayload.claims)
}

// string raw_claims = 6;
inline void JwtPayload::clear_raw_claims() {
  raw_claims_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& JwtPayload::raw_claims() const {
  // @@protoc_insertion_point(field_get:istio.authn.JwtPayload.raw_claims)
  return raw_claims_.GetNoArena();
}
inline void JwtPayload::set_raw_claims(const std::string& value) {
  
  raw_claims_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.authn.JwtPayload.raw_claims)
}
inline void JwtPayload::set_raw_claims(std::string&& value) {
  
  raw_claims_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.authn.JwtPayload.raw_claims)
}
inline void JwtPayload::set_raw_claims(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raw_claims_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.authn.JwtPayload.raw_claims)
}
inline void JwtPayload::set_raw_claims(const char* value, size_t size) {
  
  raw_claims_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.authn.JwtPayload.raw_claims)
}
inline std::string* JwtPayload::mutable_raw_claims() {
  
  // @@protoc_insertion_point(field_mutable:istio.authn.JwtPayload.raw_claims)
  return raw_claims_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JwtPayload::release_raw_claims() {
  // @@protoc_insertion_point(field_release:istio.authn.JwtPayload.raw_claims)
  
  return raw_claims_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JwtPayload::set_allocated_raw_claims(std::string* raw_claims) {
  if (raw_claims != nullptr) {
    
  } else {
    
  }
  raw_claims_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_claims);
  // @@protoc_insertion_point(field_set_allocated:istio.authn.JwtPayload.raw_claims)
}

// -------------------------------------------------------------------

// X509Payload

// string user = 1;
inline void X509Payload::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& X509Payload::user() const {
  // @@protoc_insertion_point(field_get:istio.authn.X509Payload.user)
  return user_.GetNoArena();
}
inline void X509Payload::set_user(const std::string& value) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.authn.X509Payload.user)
}
inline void X509Payload::set_user(std::string&& value) {
  
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.authn.X509Payload.user)
}
inline void X509Payload::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.authn.X509Payload.user)
}
inline void X509Payload::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.authn.X509Payload.user)
}
inline std::string* X509Payload::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:istio.authn.X509Payload.user)
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* X509Payload::release_user() {
  // @@protoc_insertion_point(field_release:istio.authn.X509Payload.user)
  
  return user_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void X509Payload::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:istio.authn.X509Payload.user)
}

// repeated string trust_domains = 2;
inline int X509Payload::trust_domains_size() const {
  return trust_domains_.size();
}
inline void X509Payload::clear_trust_domains() {
  trust_domains_.Clear();
}
inline const std::string& X509Payload::trust_domains(int index) const {
  // @@protoc_insertion_point(field_get:istio.authn.X509Payload.trust_domains)
  return trust_domains_.Get(index);
}
inline std::string* X509Payload::mutable_trust_domains(int index) {
  // @@protoc_insertion_point(field_mutable:istio.authn.X509Payload.trust_domains)
  return trust_domains_.Mutable(index);
}
inline void X509Payload::set_trust_domains(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:istio.authn.X509Payload.trust_domains)
  trust_domains_.Mutable(index)->assign(value);
}
inline void X509Payload::set_trust_domains(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.authn.X509Payload.trust_domains)
  trust_domains_.Mutable(index)->assign(std::move(value));
}
inline void X509Payload::set_trust_domains(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  trust_domains_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.authn.X509Payload.trust_domains)
}
inline void X509Payload::set_trust_domains(int index, const char* value, size_t size) {
  trust_domains_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.authn.X509Payload.trust_domains)
}
inline std::string* X509Payload::add_trust_domains() {
  // @@protoc_insertion_point(field_add_mutable:istio.authn.X509Payload.trust_domains)
  return trust_domains_.Add();
}
inline void X509Payload::add_trust_domains(const std::string& value) {
  trust_domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.authn.X509Payload.trust_domains)
}
inline void X509Payload::add_trust_domains(std::string&& value) {
  trust_domains_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.authn.X509Payload.trust_domains)
}
inline void X509Payload::add_trust_domains(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  trust_domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.authn.X509Payload.trust_domains)
}
inline void X509Payload::add_trust_domains(const char* value, size_t size) {
  trust_domains_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.authn.X509Payload.trust_domains)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
X509Payload::trust_domains() const {
  // @@protoc_insertion_point(field_list:istio.authn.X509Payload.trust_domains)
  return trust_domains_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
X509Payload::mutable_trust_domains() {
  // @@protoc_insertion_point(field_mutable_list:istio.authn.X509Payload.trust_domains)
  return &trust_domains_;
}

// -------------------------------------------------------------------

// Payload

// .istio.authn.X509Payload x509 = 1;
inline bool Payload::has_x509() const {
  return payload_case() == kX509;
}
inline void Payload::set_has_x509() {
  _oneof_case_[0] = kX509;
}
inline void Payload::clear_x509() {
  if (has_x509()) {
    delete payload_.x509_;
    clear_has_payload();
  }
}
inline ::istio::authn::X509Payload* Payload::release_x509() {
  // @@protoc_insertion_point(field_release:istio.authn.Payload.x509)
  if (has_x509()) {
    clear_has_payload();
      ::istio::authn::X509Payload* temp = payload_.x509_;
    payload_.x509_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::istio::authn::X509Payload& Payload::x509() const {
  // @@protoc_insertion_point(field_get:istio.authn.Payload.x509)
  return has_x509()
      ? *payload_.x509_
      : *reinterpret_cast< ::istio::authn::X509Payload*>(&::istio::authn::_X509Payload_default_instance_);
}
inline ::istio::authn::X509Payload* Payload::mutable_x509() {
  if (!has_x509()) {
    clear_payload();
    set_has_x509();
    payload_.x509_ = CreateMaybeMessage< ::istio::authn::X509Payload >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:istio.authn.Payload.x509)
  return payload_.x509_;
}

// .istio.authn.JwtPayload jwt = 2;
inline bool Payload::has_jwt() const {
  return payload_case() == kJwt;
}
inline void Payload::set_has_jwt() {
  _oneof_case_[0] = kJwt;
}
inline void Payload::clear_jwt() {
  if (has_jwt()) {
    delete payload_.jwt_;
    clear_has_payload();
  }
}
inline ::istio::authn::JwtPayload* Payload::release_jwt() {
  // @@protoc_insertion_point(field_release:istio.authn.Payload.jwt)
  if (has_jwt()) {
    clear_has_payload();
      ::istio::authn::JwtPayload* temp = payload_.jwt_;
    payload_.jwt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::istio::authn::JwtPayload& Payload::jwt() const {
  // @@protoc_insertion_point(field_get:istio.authn.Payload.jwt)
  return has_jwt()
      ? *payload_.jwt_
      : *reinterpret_cast< ::istio::authn::JwtPayload*>(&::istio::authn::_JwtPayload_default_instance_);
}
inline ::istio::authn::JwtPayload* Payload::mutable_jwt() {
  if (!has_jwt()) {
    clear_payload();
    set_has_jwt();
    payload_.jwt_ = CreateMaybeMessage< ::istio::authn::JwtPayload >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:istio.authn.Payload.jwt)
  return payload_.jwt_;
}

inline bool Payload::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Payload::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Payload::PayloadCase Payload::payload_case() const {
  return Payload::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Result

// string principal = 1;
inline void Result::clear_principal() {
  principal_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Result::principal() const {
  // @@protoc_insertion_point(field_get:istio.authn.Result.principal)
  return principal_.GetNoArena();
}
inline void Result::set_principal(const std::string& value) {
  
  principal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.authn.Result.principal)
}
inline void Result::set_principal(std::string&& value) {
  
  principal_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.authn.Result.principal)
}
inline void Result::set_principal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  principal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.authn.Result.principal)
}
inline void Result::set_principal(const char* value, size_t size) {
  
  principal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.authn.Result.principal)
}
inline std::string* Result::mutable_principal() {
  
  // @@protoc_insertion_point(field_mutable:istio.authn.Result.principal)
  return principal_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Result::release_principal() {
  // @@protoc_insertion_point(field_release:istio.authn.Result.principal)
  
  return principal_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_allocated_principal(std::string* principal) {
  if (principal != nullptr) {
    
  } else {
    
  }
  principal_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), principal);
  // @@protoc_insertion_point(field_set_allocated:istio.authn.Result.principal)
}

// string peer_user = 2;
inline void Result::clear_peer_user() {
  peer_user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Result::peer_user() const {
  // @@protoc_insertion_point(field_get:istio.authn.Result.peer_user)
  return peer_user_.GetNoArena();
}
inline void Result::set_peer_user(const std::string& value) {
  
  peer_user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.authn.Result.peer_user)
}
inline void Result::set_peer_user(std::string&& value) {
  
  peer_user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.authn.Result.peer_user)
}
inline void Result::set_peer_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  peer_user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.authn.Result.peer_user)
}
inline void Result::set_peer_user(const char* value, size_t size) {
  
  peer_user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.authn.Result.peer_user)
}
inline std::string* Result::mutable_peer_user() {
  
  // @@protoc_insertion_point(field_mutable:istio.authn.Result.peer_user)
  return peer_user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Result::release_peer_user() {
  // @@protoc_insertion_point(field_release:istio.authn.Result.peer_user)
  
  return peer_user_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_allocated_peer_user(std::string* peer_user) {
  if (peer_user != nullptr) {
    
  } else {
    
  }
  peer_user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer_user);
  // @@protoc_insertion_point(field_set_allocated:istio.authn.Result.peer_user)
}

// .istio.authn.JwtPayload origin = 3;
inline bool Result::has_origin() const {
  return this != internal_default_instance() && origin_ != nullptr;
}
inline void Result::clear_origin() {
  if (GetArenaNoVirtual() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
}
inline const ::istio::authn::JwtPayload& Result::origin() const {
  const ::istio::authn::JwtPayload* p = origin_;
  // @@protoc_insertion_point(field_get:istio.authn.Result.origin)
  return p != nullptr ? *p : *reinterpret_cast<const ::istio::authn::JwtPayload*>(
      &::istio::authn::_JwtPayload_default_instance_);
}
inline ::istio::authn::JwtPayload* Result::release_origin() {
  // @@protoc_insertion_point(field_release:istio.authn.Result.origin)
  
  ::istio::authn::JwtPayload* temp = origin_;
  origin_ = nullptr;
  return temp;
}
inline ::istio::authn::JwtPayload* Result::mutable_origin() {
  
  if (origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::istio::authn::JwtPayload>(GetArenaNoVirtual());
    origin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.authn.Result.origin)
  return origin_;
}
inline void Result::set_allocated_origin(::istio::authn::JwtPayload* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete origin_;
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    
  } else {
    
  }
  origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:istio.authn.Result.origin)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace authn
}  // namespace istio

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_istio_2fauthn_2fcontext_2eproto
