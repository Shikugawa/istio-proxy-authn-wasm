// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/core/v3/base.proto

#include "envoy/config/core/v3/base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_envoy_2fconfig_2fcore_2fv3_2faddress_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Address_envoy_2fconfig_2fcore_2fv3_2faddress_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_envoy_2fconfig_2fcore_2fv3_2fbackoff_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BackoffStrategy_envoy_2fconfig_2fcore_2fv3_2fbackoff_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BuildVersion_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataSource_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Extension_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeaderValue_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_envoy_2fconfig_2fcore_2fv3_2fhttp_5furi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HttpUri_envoy_2fconfig_2fcore_2fv3_2fhttp_5furi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Locality_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Metadata_FilterMetadataEntry_DoNotUse_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RemoteDataSource_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RetryPolicy_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_envoy_2ftype_2fv3_2fpercent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FractionalPercent_envoy_2ftype_2fv3_2fpercent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_envoy_2ftype_2fv3_2fsemantic_5fversion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SemanticVersion_envoy_2ftype_2fv3_2fsemantic_5fversion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UInt32Value_google_2fprotobuf_2fwrappers_2eproto;
namespace envoy {
namespace config {
namespace core {
namespace v3 {
class LocalityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Locality> _instance;
} _Locality_default_instance_;
class BuildVersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildVersion> _instance;
} _BuildVersion_default_instance_;
class ExtensionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Extension> _instance;
} _Extension_default_instance_;
class NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Node> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_agent_version_;
  const ::envoy::config::core::v3::BuildVersion* user_agent_build_version_;
} _Node_default_instance_;
class Metadata_FilterMetadataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Metadata_FilterMetadataEntry_DoNotUse> _instance;
} _Metadata_FilterMetadataEntry_DoNotUse_default_instance_;
class MetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Metadata> _instance;
} _Metadata_default_instance_;
class RuntimeUInt32DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuntimeUInt32> _instance;
} _RuntimeUInt32_default_instance_;
class RuntimeFeatureFlagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuntimeFeatureFlag> _instance;
} _RuntimeFeatureFlag_default_instance_;
class HeaderValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeaderValue> _instance;
} _HeaderValue_default_instance_;
class HeaderValueOptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeaderValueOption> _instance;
} _HeaderValueOption_default_instance_;
class HeaderMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeaderMap> _instance;
} _HeaderMap_default_instance_;
class DataSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataSource> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inline_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inline_string_;
} _DataSource_default_instance_;
class RetryPolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RetryPolicy> _instance;
} _RetryPolicy_default_instance_;
class RemoteDataSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteDataSource> _instance;
} _RemoteDataSource_default_instance_;
class AsyncDataSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AsyncDataSource> _instance;
  const ::envoy::config::core::v3::DataSource* local_;
  const ::envoy::config::core::v3::RemoteDataSource* remote_;
} _AsyncDataSource_default_instance_;
class TransportSocketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransportSocket> _instance;
  const PROTOBUF_NAMESPACE_ID::Any* typed_config_;
} _TransportSocket_default_instance_;
class RuntimeFractionalPercentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuntimeFractionalPercent> _instance;
} _RuntimeFractionalPercent_default_instance_;
class ControlPlaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlPlane> _instance;
} _ControlPlane_default_instance_;
}  // namespace v3
}  // namespace core
}  // namespace config
}  // namespace envoy
static void InitDefaultsscc_info_AsyncDataSource_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::envoy::config::core::v3::_AsyncDataSource_default_instance_;
    new (ptr) ::envoy::config::core::v3::AsyncDataSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::config::core::v3::AsyncDataSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AsyncDataSource_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AsyncDataSource_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto}, {
      &scc_info_DataSource_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,
      &scc_info_RemoteDataSource_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,}};

static void InitDefaultsscc_info_BuildVersion_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::envoy::config::core::v3::_BuildVersion_default_instance_;
    new (ptr) ::envoy::config::core::v3::BuildVersion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::config::core::v3::BuildVersion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BuildVersion_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_BuildVersion_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto}, {
      &scc_info_SemanticVersion_envoy_2ftype_2fv3_2fsemantic_5fversion_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_ControlPlane_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::envoy::config::core::v3::_ControlPlane_default_instance_;
    new (ptr) ::envoy::config::core::v3::ControlPlane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::config::core::v3::ControlPlane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControlPlane_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ControlPlane_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto}, {}};

static void InitDefaultsscc_info_DataSource_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::envoy::config::core::v3::_DataSource_default_instance_;
    new (ptr) ::envoy::config::core::v3::DataSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::config::core::v3::DataSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataSource_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DataSource_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto}, {}};

static void InitDefaultsscc_info_Extension_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::envoy::config::core::v3::_Extension_default_instance_;
    new (ptr) ::envoy::config::core::v3::Extension();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::config::core::v3::Extension::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Extension_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Extension_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto}, {
      &scc_info_BuildVersion_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,}};

static void InitDefaultsscc_info_HeaderMap_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::envoy::config::core::v3::_HeaderMap_default_instance_;
    new (ptr) ::envoy::config::core::v3::HeaderMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::config::core::v3::HeaderMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HeaderMap_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_HeaderMap_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto}, {
      &scc_info_HeaderValue_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,}};

static void InitDefaultsscc_info_HeaderValue_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::envoy::config::core::v3::_HeaderValue_default_instance_;
    new (ptr) ::envoy::config::core::v3::HeaderValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::config::core::v3::HeaderValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeaderValue_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HeaderValue_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto}, {}};

static void InitDefaultsscc_info_HeaderValueOption_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::envoy::config::core::v3::_HeaderValueOption_default_instance_;
    new (ptr) ::envoy::config::core::v3::HeaderValueOption();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::config::core::v3::HeaderValueOption::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HeaderValueOption_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_HeaderValueOption_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto}, {
      &scc_info_HeaderValue_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_Locality_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::envoy::config::core::v3::_Locality_default_instance_;
    new (ptr) ::envoy::config::core::v3::Locality();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::config::core::v3::Locality::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Locality_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Locality_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto}, {}};

static void InitDefaultsscc_info_Metadata_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::envoy::config::core::v3::_Metadata_default_instance_;
    new (ptr) ::envoy::config::core::v3::Metadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::config::core::v3::Metadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Metadata_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Metadata_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto}, {
      &scc_info_Metadata_FilterMetadataEntry_DoNotUse_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,}};

static void InitDefaultsscc_info_Metadata_FilterMetadataEntry_DoNotUse_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::envoy::config::core::v3::_Metadata_FilterMetadataEntry_DoNotUse_default_instance_;
    new (ptr) ::envoy::config::core::v3::Metadata_FilterMetadataEntry_DoNotUse();
  }
  ::envoy::config::core::v3::Metadata_FilterMetadataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Metadata_FilterMetadataEntry_DoNotUse_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Metadata_FilterMetadataEntry_DoNotUse_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_Node_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::envoy::config::core::v3::_Node_default_instance_;
    new (ptr) ::envoy::config::core::v3::Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::config::core::v3::Node::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Node_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_Node_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,
      &scc_info_Locality_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,
      &scc_info_BuildVersion_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,
      &scc_info_Extension_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,
      &scc_info_Address_envoy_2fconfig_2fcore_2fv3_2faddress_2eproto.base,}};

static void InitDefaultsscc_info_RemoteDataSource_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::envoy::config::core::v3::_RemoteDataSource_default_instance_;
    new (ptr) ::envoy::config::core::v3::RemoteDataSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::config::core::v3::RemoteDataSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RemoteDataSource_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RemoteDataSource_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto}, {
      &scc_info_HttpUri_envoy_2fconfig_2fcore_2fv3_2fhttp_5furi_2eproto.base,
      &scc_info_RetryPolicy_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,}};

static void InitDefaultsscc_info_RetryPolicy_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::envoy::config::core::v3::_RetryPolicy_default_instance_;
    new (ptr) ::envoy::config::core::v3::RetryPolicy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::config::core::v3::RetryPolicy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RetryPolicy_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RetryPolicy_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto}, {
      &scc_info_BackoffStrategy_envoy_2fconfig_2fcore_2fv3_2fbackoff_2eproto.base,
      &scc_info_UInt32Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_RuntimeFeatureFlag_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::envoy::config::core::v3::_RuntimeFeatureFlag_default_instance_;
    new (ptr) ::envoy::config::core::v3::RuntimeFeatureFlag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::config::core::v3::RuntimeFeatureFlag::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RuntimeFeatureFlag_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RuntimeFeatureFlag_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto}, {
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_RuntimeFractionalPercent_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::envoy::config::core::v3::_RuntimeFractionalPercent_default_instance_;
    new (ptr) ::envoy::config::core::v3::RuntimeFractionalPercent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::config::core::v3::RuntimeFractionalPercent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RuntimeFractionalPercent_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RuntimeFractionalPercent_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto}, {
      &scc_info_FractionalPercent_envoy_2ftype_2fv3_2fpercent_2eproto.base,}};

static void InitDefaultsscc_info_RuntimeUInt32_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::envoy::config::core::v3::_RuntimeUInt32_default_instance_;
    new (ptr) ::envoy::config::core::v3::RuntimeUInt32();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::config::core::v3::RuntimeUInt32::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuntimeUInt32_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RuntimeUInt32_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto}, {}};

static void InitDefaultsscc_info_TransportSocket_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::envoy::config::core::v3::_TransportSocket_default_instance_;
    new (ptr) ::envoy::config::core::v3::TransportSocket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::config::core::v3::TransportSocket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransportSocket_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TransportSocket_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Locality, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Locality, region_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Locality, zone_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Locality, sub_zone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::BuildVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::BuildVersion, version_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::BuildVersion, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Extension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Extension, name_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Extension, category_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Extension, type_descriptor_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Extension, version_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Extension, disabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Node, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Node, id_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Node, cluster_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Node, metadata_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Node, locality_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Node, user_agent_name_),
  offsetof(::envoy::config::core::v3::NodeDefaultTypeInternal, user_agent_version_),
  offsetof(::envoy::config::core::v3::NodeDefaultTypeInternal, user_agent_build_version_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Node, extensions_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Node, client_features_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Node, listening_addresses_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Node, user_agent_version_type_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Metadata_FilterMetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Metadata_FilterMetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Metadata_FilterMetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Metadata_FilterMetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::Metadata, filter_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::RuntimeUInt32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::RuntimeUInt32, default_value_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::RuntimeUInt32, runtime_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::RuntimeFeatureFlag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::RuntimeFeatureFlag, default_value_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::RuntimeFeatureFlag, runtime_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::HeaderValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::HeaderValue, key_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::HeaderValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::HeaderValueOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::HeaderValueOption, header_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::HeaderValueOption, append_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::HeaderMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::HeaderMap, headers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::DataSource, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::DataSource, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::envoy::config::core::v3::DataSourceDefaultTypeInternal, filename_),
  offsetof(::envoy::config::core::v3::DataSourceDefaultTypeInternal, inline_bytes_),
  offsetof(::envoy::config::core::v3::DataSourceDefaultTypeInternal, inline_string_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::DataSource, specifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::RetryPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::RetryPolicy, retry_back_off_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::RetryPolicy, num_retries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::RemoteDataSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::RemoteDataSource, http_uri_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::RemoteDataSource, sha256_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::RemoteDataSource, retry_policy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::AsyncDataSource, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::AsyncDataSource, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::envoy::config::core::v3::AsyncDataSourceDefaultTypeInternal, local_),
  offsetof(::envoy::config::core::v3::AsyncDataSourceDefaultTypeInternal, remote_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::AsyncDataSource, specifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::TransportSocket, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::TransportSocket, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::TransportSocket, name_),
  offsetof(::envoy::config::core::v3::TransportSocketDefaultTypeInternal, typed_config_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::TransportSocket, config_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::RuntimeFractionalPercent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::RuntimeFractionalPercent, default_value_),
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::RuntimeFractionalPercent, runtime_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::ControlPlane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::envoy::config::core::v3::ControlPlane, identifier_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::envoy::config::core::v3::Locality)},
  { 8, -1, sizeof(::envoy::config::core::v3::BuildVersion)},
  { 15, -1, sizeof(::envoy::config::core::v3::Extension)},
  { 25, -1, sizeof(::envoy::config::core::v3::Node)},
  { 41, 48, sizeof(::envoy::config::core::v3::Metadata_FilterMetadataEntry_DoNotUse)},
  { 50, -1, sizeof(::envoy::config::core::v3::Metadata)},
  { 56, -1, sizeof(::envoy::config::core::v3::RuntimeUInt32)},
  { 63, -1, sizeof(::envoy::config::core::v3::RuntimeFeatureFlag)},
  { 70, -1, sizeof(::envoy::config::core::v3::HeaderValue)},
  { 77, -1, sizeof(::envoy::config::core::v3::HeaderValueOption)},
  { 84, -1, sizeof(::envoy::config::core::v3::HeaderMap)},
  { 90, -1, sizeof(::envoy::config::core::v3::DataSource)},
  { 99, -1, sizeof(::envoy::config::core::v3::RetryPolicy)},
  { 106, -1, sizeof(::envoy::config::core::v3::RemoteDataSource)},
  { 114, -1, sizeof(::envoy::config::core::v3::AsyncDataSource)},
  { 122, -1, sizeof(::envoy::config::core::v3::TransportSocket)},
  { 130, -1, sizeof(::envoy::config::core::v3::RuntimeFractionalPercent)},
  { 137, -1, sizeof(::envoy::config::core::v3::ControlPlane)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::envoy::config::core::v3::_Locality_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::envoy::config::core::v3::_BuildVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::envoy::config::core::v3::_Extension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::envoy::config::core::v3::_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::envoy::config::core::v3::_Metadata_FilterMetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::envoy::config::core::v3::_Metadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::envoy::config::core::v3::_RuntimeUInt32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::envoy::config::core::v3::_RuntimeFeatureFlag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::envoy::config::core::v3::_HeaderValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::envoy::config::core::v3::_HeaderValueOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::envoy::config::core::v3::_HeaderMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::envoy::config::core::v3::_DataSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::envoy::config::core::v3::_RetryPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::envoy::config::core::v3::_RemoteDataSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::envoy::config::core::v3::_AsyncDataSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::envoy::config::core::v3::_TransportSocket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::envoy::config::core::v3::_RuntimeFractionalPercent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::envoy::config::core::v3::_ControlPlane_default_instance_),
};

const char descriptor_table_protodef_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037envoy/config/core/v3/base.proto\022\024envoy"
  ".config.core.v3\032\"envoy/config/core/v3/ad"
  "dress.proto\032\"envoy/config/core/v3/backof"
  "f.proto\032#envoy/config/core/v3/http_uri.p"
  "roto\032\033envoy/type/v3/percent.proto\032$envoy"
  "/type/v3/semantic_version.proto\032\031google/"
  "protobuf/any.proto\032\036google/protobuf/dura"
  "tion.proto\032\034google/protobuf/struct.proto"
  "\032\036google/protobuf/wrappers.proto\032\035udpa/a"
  "nnotations/status.proto\032!udpa/annotation"
  "s/versioning.proto\032\027validate/validate.pr"
  "oto\"]\n\010Locality\022\016\n\006region\030\001 \001(\t\022\014\n\004zone\030"
  "\002 \001(\t\022\020\n\010sub_zone\030\003 \001(\t:!\232\305\210\036\034\n\032envoy.ap"
  "i.v2.core.Locality\"\221\001\n\014BuildVersion\022/\n\007v"
  "ersion\030\001 \001(\0132\036.envoy.type.v3.SemanticVer"
  "sion\022)\n\010metadata\030\002 \001(\0132\027.google.protobuf"
  ".Struct:%\232\305\210\036 \n\036envoy.api.v2.core.BuildV"
  "ersion\"\257\001\n\tExtension\022\014\n\004name\030\001 \001(\t\022\020\n\010ca"
  "tegory\030\002 \001(\t\022\027\n\017type_descriptor\030\003 \001(\t\0223\n"
  "\007version\030\004 \001(\0132\".envoy.config.core.v3.Bu"
  "ildVersion\022\020\n\010disabled\030\005 \001(\010:\"\232\305\210\036\035\n\033env"
  "oy.api.v2.core.Extension\"\330\003\n\004Node\022\n\n\002id\030"
  "\001 \001(\t\022\017\n\007cluster\030\002 \001(\t\022)\n\010metadata\030\003 \001(\013"
  "2\027.google.protobuf.Struct\0220\n\010locality\030\004 "
  "\001(\0132\036.envoy.config.core.v3.Locality\022\027\n\017u"
  "ser_agent_name\030\006 \001(\t\022\034\n\022user_agent_versi"
  "on\030\007 \001(\tH\000\022F\n\030user_agent_build_version\030\010"
  " \001(\0132\".envoy.config.core.v3.BuildVersion"
  "H\000\0223\n\nextensions\030\t \003(\0132\037.envoy.config.co"
  "re.v3.Extension\022\027\n\017client_features\030\n \003(\t"
  "\022:\n\023listening_addresses\030\013 \003(\0132\035.envoy.co"
  "nfig.core.v3.Address:\035\232\305\210\036\030\n\026envoy.api.v"
  "2.core.NodeB\031\n\027user_agent_version_typeJ\004"
  "\010\005\020\006R\rbuild_version\"\312\001\n\010Metadata\022K\n\017filt"
  "er_metadata\030\001 \003(\01322.envoy.config.core.v3"
  ".Metadata.FilterMetadataEntry\032N\n\023FilterM"
  "etadataEntry\022\013\n\003key\030\001 \001(\t\022&\n\005value\030\002 \001(\013"
  "2\027.google.protobuf.Struct:\0028\001:!\232\305\210\036\034\n\032en"
  "voy.api.v2.core.Metadata\"l\n\rRuntimeUInt3"
  "2\022\025\n\rdefault_value\030\002 \001(\r\022\034\n\013runtime_key\030"
  "\003 \001(\tB\007\372B\004r\002 \001:&\232\305\210\036!\n\037envoy.api.v2.core"
  ".RuntimeUInt32\"\234\001\n\022RuntimeFeatureFlag\022;\n"
  "\rdefault_value\030\001 \001(\0132\032.google.protobuf.B"
  "oolValueB\010\372B\005\212\001\002\020\001\022\034\n\013runtime_key\030\002 \001(\tB"
  "\007\372B\004r\002 \001:+\232\305\210\036&\n$envoy.api.v2.core.Runti"
  "meFeatureFlag\"s\n\013HeaderValue\022\036\n\003key\030\001 \001("
  "\tB\021\372B\016r\014 \001(\200\200\001\300\001\001\310\001\000\022\036\n\005value\030\002 \001(\tB\017\372B\014"
  "r\n(\200\200\001\300\001\002\310\001\000:$\232\305\210\036\037\n\035envoy.api.v2.core.H"
  "eaderValue\"\250\001\n\021HeaderValueOption\022;\n\006head"
  "er\030\001 \001(\0132!.envoy.config.core.v3.HeaderVa"
  "lueB\010\372B\005\212\001\002\020\001\022*\n\006append\030\002 \001(\0132\032.google.p"
  "rotobuf.BoolValue:*\232\305\210\036%\n#envoy.api.v2.c"
  "ore.HeaderValueOption\"c\n\tHeaderMap\0222\n\007he"
  "aders\030\001 \003(\0132!.envoy.config.core.v3.Heade"
  "rValue:\"\232\305\210\036\035\n\033envoy.api.v2.core.HeaderM"
  "ap\"\243\001\n\nDataSource\022\033\n\010filename\030\001 \001(\tB\007\372B\004"
  "r\002 \001H\000\022\037\n\014inline_bytes\030\002 \001(\014B\007\372B\004z\002\020\001H\000\022"
  " \n\rinline_string\030\003 \001(\tB\007\372B\004r\002 \001H\000:#\232\305\210\036\036"
  "\n\034envoy.api.v2.core.DataSourceB\020\n\tspecif"
  "ier\022\003\370B\001\"\245\001\n\013RetryPolicy\022=\n\016retry_back_o"
  "ff\030\001 \001(\0132%.envoy.config.core.v3.BackoffS"
  "trategy\0221\n\013num_retries\030\002 \001(\0132\034.google.pr"
  "otobuf.UInt32Value:$\232\305\210\036\037\n\035envoy.api.v2."
  "core.RetryPolicy\"\312\001\n\020RemoteDataSource\0229\n"
  "\010http_uri\030\001 \001(\0132\035.envoy.config.core.v3.H"
  "ttpUriB\010\372B\005\212\001\002\020\001\022\027\n\006sha256\030\002 \001(\tB\007\372B\004r\002 "
  "\001\0227\n\014retry_policy\030\003 \001(\0132!.envoy.config.c"
  "ore.v3.RetryPolicy:)\232\305\210\036$\n\"envoy.api.v2."
  "core.RemoteDataSource\"\272\001\n\017AsyncDataSourc"
  "e\0221\n\005local\030\001 \001(\0132 .envoy.config.core.v3."
  "DataSourceH\000\0228\n\006remote\030\002 \001(\0132&.envoy.con"
  "fig.core.v3.RemoteDataSourceH\000:(\232\305\210\036#\n!e"
  "nvoy.api.v2.core.AsyncDataSourceB\020\n\tspec"
  "ifier\022\003\370B\001\"\235\001\n\017TransportSocket\022\025\n\004name\030\001"
  " \001(\tB\007\372B\004r\002 \001\022,\n\014typed_config\030\003 \001(\0132\024.go"
  "ogle.protobuf.AnyH\000:(\232\305\210\036#\n!envoy.api.v2"
  ".core.TransportSocketB\r\n\013config_typeJ\004\010\002"
  "\020\003R\006config\"\245\001\n\030RuntimeFractionalPercent\022"
  "A\n\rdefault_value\030\001 \001(\0132 .envoy.type.v3.F"
  "ractionalPercentB\010\372B\005\212\001\002\020\001\022\023\n\013runtime_ke"
  "y\030\002 \001(\t:1\232\305\210\036,\n*envoy.api.v2.core.Runtim"
  "eFractionalPercent\"I\n\014ControlPlane\022\022\n\nid"
  "entifier\030\001 \001(\t:%\232\305\210\036 \n\036envoy.api.v2.core"
  ".ControlPlane*(\n\017RoutingPriority\022\013\n\007DEFA"
  "ULT\020\000\022\010\n\004HIGH\020\001*\211\001\n\rRequestMethod\022\026\n\022MET"
  "HOD_UNSPECIFIED\020\000\022\007\n\003GET\020\001\022\010\n\004HEAD\020\002\022\010\n\004"
  "POST\020\003\022\007\n\003PUT\020\004\022\n\n\006DELETE\020\005\022\013\n\007CONNECT\020\006"
  "\022\013\n\007OPTIONS\020\007\022\t\n\005TRACE\020\010\022\t\n\005PATCH\020\t*>\n\020T"
  "rafficDirection\022\017\n\013UNSPECIFIED\020\000\022\013\n\007INBO"
  "UND\020\001\022\014\n\010OUTBOUND\020\002B9\n\"io.envoyproxy.env"
  "oy.config.core.v3B\tBaseProtoP\001\272\200\310\321\006\002\020\003b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto_deps[12] = {
  &::descriptor_table_envoy_2fconfig_2fcore_2fv3_2faddress_2eproto,
  &::descriptor_table_envoy_2fconfig_2fcore_2fv3_2fbackoff_2eproto,
  &::descriptor_table_envoy_2fconfig_2fcore_2fv3_2fhttp_5furi_2eproto,
  &::descriptor_table_envoy_2ftype_2fv3_2fpercent_2eproto,
  &::descriptor_table_envoy_2ftype_2fv3_2fsemantic_5fversion_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_udpa_2fannotations_2fstatus_2eproto,
  &::descriptor_table_udpa_2fannotations_2fversioning_2eproto,
  &::descriptor_table_validate_2fvalidate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto_sccs[18] = {
  &scc_info_AsyncDataSource_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,
  &scc_info_BuildVersion_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,
  &scc_info_ControlPlane_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,
  &scc_info_DataSource_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,
  &scc_info_Extension_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,
  &scc_info_HeaderMap_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,
  &scc_info_HeaderValue_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,
  &scc_info_HeaderValueOption_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,
  &scc_info_Locality_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,
  &scc_info_Metadata_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,
  &scc_info_Metadata_FilterMetadataEntry_DoNotUse_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,
  &scc_info_Node_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,
  &scc_info_RemoteDataSource_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,
  &scc_info_RetryPolicy_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,
  &scc_info_RuntimeFeatureFlag_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,
  &scc_info_RuntimeFractionalPercent_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,
  &scc_info_RuntimeUInt32_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,
  &scc_info_TransportSocket_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto_once;
static bool descriptor_table_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto = {
  &descriptor_table_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto_initialized, descriptor_table_protodef_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto, "envoy/config/core/v3/base.proto", 3646,
  &descriptor_table_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto_once, descriptor_table_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto_sccs, descriptor_table_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto_deps, 18, 12,
  schemas, file_default_instances, TableStruct_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto::offsets,
  file_level_metadata_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto, 18, file_level_enum_descriptors_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto, file_level_service_descriptors_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto), true);
namespace envoy {
namespace config {
namespace core {
namespace v3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoutingPriority_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto);
  return file_level_enum_descriptors_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto[0];
}
bool RoutingPriority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto);
  return file_level_enum_descriptors_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto[1];
}
bool RequestMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto);
  return file_level_enum_descriptors_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto[2];
}
bool TrafficDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Locality::InitAsDefaultInstance() {
}
class Locality::_Internal {
 public:
};

Locality::Locality()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.config.core.v3.Locality)
}
Locality::Locality(const Locality& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.region().empty()) {
    region_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.zone().empty()) {
    zone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  sub_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sub_zone().empty()) {
    sub_zone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sub_zone_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.config.core.v3.Locality)
}

void Locality::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Locality_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Locality::~Locality() {
  // @@protoc_insertion_point(destructor:envoy.config.core.v3.Locality)
  SharedDtor();
}

void Locality::SharedDtor() {
  region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_zone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Locality::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Locality& Locality::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Locality_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  return *internal_default_instance();
}


void Locality::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.config.core.v3.Locality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_zone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Locality::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_region(), ptr, ctx, "envoy.config.core.v3.Locality.region");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string zone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_zone(), ptr, ctx, "envoy.config.core.v3.Locality.zone");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sub_zone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sub_zone(), ptr, ctx, "envoy.config.core.v3.Locality.sub_zone");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Locality::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.config.core.v3.Locality)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string region = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->region().data(), static_cast<int>(this->region().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "envoy.config.core.v3.Locality.region"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), static_cast<int>(this->zone().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "envoy.config.core.v3.Locality.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sub_zone = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_zone()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sub_zone().data(), static_cast<int>(this->sub_zone().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "envoy.config.core.v3.Locality.sub_zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.config.core.v3.Locality)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.config.core.v3.Locality)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Locality::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.config.core.v3.Locality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string region = 1;
  if (this->region().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), static_cast<int>(this->region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.Locality.region");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->region(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), static_cast<int>(this->zone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.Locality.zone");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string sub_zone = 3;
  if (this->sub_zone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sub_zone().data(), static_cast<int>(this->sub_zone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.Locality.sub_zone");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sub_zone(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.config.core.v3.Locality)
}

::PROTOBUF_NAMESPACE_ID::uint8* Locality::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:envoy.config.core.v3.Locality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string region = 1;
  if (this->region().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), static_cast<int>(this->region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.Locality.region");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->region(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), static_cast<int>(this->zone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.Locality.zone");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string sub_zone = 3;
  if (this->sub_zone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sub_zone().data(), static_cast<int>(this->sub_zone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.Locality.sub_zone");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->sub_zone(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.config.core.v3.Locality)
  return target;
}

size_t Locality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.config.core.v3.Locality)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string region = 1;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->region());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string sub_zone = 3;
  if (this->sub_zone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sub_zone());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Locality::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.config.core.v3.Locality)
  GOOGLE_DCHECK_NE(&from, this);
  const Locality* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Locality>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.config.core.v3.Locality)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.config.core.v3.Locality)
    MergeFrom(*source);
  }
}

void Locality::MergeFrom(const Locality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.config.core.v3.Locality)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.region().size() > 0) {

    region_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.sub_zone().size() > 0) {

    sub_zone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sub_zone_);
  }
}

void Locality::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.config.core.v3.Locality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Locality::CopyFrom(const Locality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.config.core.v3.Locality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Locality::IsInitialized() const {
  return true;
}

void Locality::InternalSwap(Locality* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  region_.Swap(&other->region_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  zone_.Swap(&other->zone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sub_zone_.Swap(&other->sub_zone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Locality::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BuildVersion::InitAsDefaultInstance() {
  ::envoy::config::core::v3::_BuildVersion_default_instance_._instance.get_mutable()->version_ = const_cast< ::envoy::type::v3::SemanticVersion*>(
      ::envoy::type::v3::SemanticVersion::internal_default_instance());
  ::envoy::config::core::v3::_BuildVersion_default_instance_._instance.get_mutable()->metadata_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class BuildVersion::_Internal {
 public:
  static const ::envoy::type::v3::SemanticVersion& version(const BuildVersion* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& metadata(const BuildVersion* msg);
};

const ::envoy::type::v3::SemanticVersion&
BuildVersion::_Internal::version(const BuildVersion* msg) {
  return *msg->version_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
BuildVersion::_Internal::metadata(const BuildVersion* msg) {
  return *msg->metadata_;
}
void BuildVersion::clear_version() {
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
void BuildVersion::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
BuildVersion::BuildVersion()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.config.core.v3.BuildVersion)
}
BuildVersion::BuildVersion(const BuildVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_version()) {
    version_ = new ::envoy::type::v3::SemanticVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  if (from.has_metadata()) {
    metadata_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.config.core.v3.BuildVersion)
}

void BuildVersion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuildVersion_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_) -
      reinterpret_cast<char*>(&version_)) + sizeof(metadata_));
}

BuildVersion::~BuildVersion() {
  // @@protoc_insertion_point(destructor:envoy.config.core.v3.BuildVersion)
  SharedDtor();
}

void BuildVersion::SharedDtor() {
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete metadata_;
}

void BuildVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildVersion& BuildVersion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildVersion_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  return *internal_default_instance();
}


void BuildVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.config.core.v3.BuildVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BuildVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .envoy.type.v3.SemanticVersion version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BuildVersion::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.config.core.v3.BuildVersion)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.type.v3.SemanticVersion version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct metadata = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.config.core.v3.BuildVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.config.core.v3.BuildVersion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BuildVersion::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.config.core.v3.BuildVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.type.v3.SemanticVersion version = 1;
  if (this->has_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::version(this), output);
  }

  // .google.protobuf.Struct metadata = 2;
  if (this->has_metadata()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::metadata(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.config.core.v3.BuildVersion)
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildVersion::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:envoy.config.core.v3.BuildVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.type.v3.SemanticVersion version = 1;
  if (this->has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::version(this), target);
  }

  // .google.protobuf.Struct metadata = 2;
  if (this->has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::metadata(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.config.core.v3.BuildVersion)
  return target;
}

size_t BuildVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.config.core.v3.BuildVersion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .envoy.type.v3.SemanticVersion version = 1;
  if (this->has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // .google.protobuf.Struct metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildVersion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.config.core.v3.BuildVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildVersion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildVersion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.config.core.v3.BuildVersion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.config.core.v3.BuildVersion)
    MergeFrom(*source);
  }
}

void BuildVersion::MergeFrom(const BuildVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.config.core.v3.BuildVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_version()) {
    mutable_version()->::envoy::type::v3::SemanticVersion::MergeFrom(from.version());
  }
  if (from.has_metadata()) {
    mutable_metadata()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from.metadata());
  }
}

void BuildVersion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.config.core.v3.BuildVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildVersion::CopyFrom(const BuildVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.config.core.v3.BuildVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildVersion::IsInitialized() const {
  return true;
}

void BuildVersion::InternalSwap(BuildVersion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(version_, other->version_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildVersion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Extension::InitAsDefaultInstance() {
  ::envoy::config::core::v3::_Extension_default_instance_._instance.get_mutable()->version_ = const_cast< ::envoy::config::core::v3::BuildVersion*>(
      ::envoy::config::core::v3::BuildVersion::internal_default_instance());
}
class Extension::_Internal {
 public:
  static const ::envoy::config::core::v3::BuildVersion& version(const Extension* msg);
};

const ::envoy::config::core::v3::BuildVersion&
Extension::_Internal::version(const Extension* msg) {
  return *msg->version_;
}
Extension::Extension()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.config.core.v3.Extension)
}
Extension::Extension(const Extension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.category().empty()) {
    category_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  type_descriptor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.type_descriptor().empty()) {
    type_descriptor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_descriptor_);
  }
  if (from.has_version()) {
    version_ = new ::envoy::config::core::v3::BuildVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  disabled_ = from.disabled_;
  // @@protoc_insertion_point(copy_constructor:envoy.config.core.v3.Extension)
}

void Extension::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Extension_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_descriptor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disabled_) -
      reinterpret_cast<char*>(&version_)) + sizeof(disabled_));
}

Extension::~Extension() {
  // @@protoc_insertion_point(destructor:envoy.config.core.v3.Extension)
  SharedDtor();
}

void Extension::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_descriptor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete version_;
}

void Extension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Extension& Extension::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Extension_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  return *internal_default_instance();
}


void Extension::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.config.core.v3.Extension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_descriptor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  disabled_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Extension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "envoy.config.core.v3.Extension.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_category(), ptr, ctx, "envoy.config.core.v3.Extension.category");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type_descriptor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_type_descriptor(), ptr, ctx, "envoy.config.core.v3.Extension.type_descriptor");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .envoy.config.core.v3.BuildVersion version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Extension::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.config.core.v3.Extension)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "envoy.config.core.v3.Extension.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string category = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->category().data(), static_cast<int>(this->category().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "envoy.config.core.v3.Extension.category"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type_descriptor = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_type_descriptor()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->type_descriptor().data(), static_cast<int>(this->type_descriptor().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "envoy.config.core.v3.Extension.type_descriptor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.config.core.v3.BuildVersion version = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disabled = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.config.core.v3.Extension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.config.core.v3.Extension)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Extension::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.config.core.v3.Extension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.Extension.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string category = 2;
  if (this->category().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->category().data(), static_cast<int>(this->category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.Extension.category");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->category(), output);
  }

  // string type_descriptor = 3;
  if (this->type_descriptor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->type_descriptor().data(), static_cast<int>(this->type_descriptor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.Extension.type_descriptor");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type_descriptor(), output);
  }

  // .envoy.config.core.v3.BuildVersion version = 4;
  if (this->has_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::version(this), output);
  }

  // bool disabled = 5;
  if (this->disabled() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->disabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.config.core.v3.Extension)
}

::PROTOBUF_NAMESPACE_ID::uint8* Extension::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:envoy.config.core.v3.Extension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.Extension.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string category = 2;
  if (this->category().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->category().data(), static_cast<int>(this->category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.Extension.category");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->category(), target);
  }

  // string type_descriptor = 3;
  if (this->type_descriptor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->type_descriptor().data(), static_cast<int>(this->type_descriptor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.Extension.type_descriptor");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->type_descriptor(), target);
  }

  // .envoy.config.core.v3.BuildVersion version = 4;
  if (this->has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::version(this), target);
  }

  // bool disabled = 5;
  if (this->disabled() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->disabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.config.core.v3.Extension)
  return target;
}

size_t Extension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.config.core.v3.Extension)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string category = 2;
  if (this->category().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->category());
  }

  // string type_descriptor = 3;
  if (this->type_descriptor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->type_descriptor());
  }

  // .envoy.config.core.v3.BuildVersion version = 4;
  if (this->has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // bool disabled = 5;
  if (this->disabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Extension::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.config.core.v3.Extension)
  GOOGLE_DCHECK_NE(&from, this);
  const Extension* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Extension>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.config.core.v3.Extension)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.config.core.v3.Extension)
    MergeFrom(*source);
  }
}

void Extension::MergeFrom(const Extension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.config.core.v3.Extension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.category().size() > 0) {

    category_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  if (from.type_descriptor().size() > 0) {

    type_descriptor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_descriptor_);
  }
  if (from.has_version()) {
    mutable_version()->::envoy::config::core::v3::BuildVersion::MergeFrom(from.version());
  }
  if (from.disabled() != 0) {
    set_disabled(from.disabled());
  }
}

void Extension::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.config.core.v3.Extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extension::CopyFrom(const Extension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.config.core.v3.Extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extension::IsInitialized() const {
  return true;
}

void Extension::InternalSwap(Extension* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  category_.Swap(&other->category_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_descriptor_.Swap(&other->type_descriptor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(disabled_, other->disabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Extension::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Node::InitAsDefaultInstance() {
  ::envoy::config::core::v3::_Node_default_instance_._instance.get_mutable()->metadata_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
  ::envoy::config::core::v3::_Node_default_instance_._instance.get_mutable()->locality_ = const_cast< ::envoy::config::core::v3::Locality*>(
      ::envoy::config::core::v3::Locality::internal_default_instance());
  ::envoy::config::core::v3::_Node_default_instance_.user_agent_version_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::envoy::config::core::v3::_Node_default_instance_.user_agent_build_version_ = const_cast< ::envoy::config::core::v3::BuildVersion*>(
      ::envoy::config::core::v3::BuildVersion::internal_default_instance());
}
class Node::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& metadata(const Node* msg);
  static const ::envoy::config::core::v3::Locality& locality(const Node* msg);
  static const ::envoy::config::core::v3::BuildVersion& user_agent_build_version(const Node* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
Node::_Internal::metadata(const Node* msg) {
  return *msg->metadata_;
}
const ::envoy::config::core::v3::Locality&
Node::_Internal::locality(const Node* msg) {
  return *msg->locality_;
}
const ::envoy::config::core::v3::BuildVersion&
Node::_Internal::user_agent_build_version(const Node* msg) {
  return *msg->user_agent_version_type_.user_agent_build_version_;
}
void Node::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
void Node::set_allocated_user_agent_build_version(::envoy::config::core::v3::BuildVersion* user_agent_build_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_user_agent_version_type();
  if (user_agent_build_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_agent_build_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_agent_build_version, submessage_arena);
    }
    set_has_user_agent_build_version();
    user_agent_version_type_.user_agent_build_version_ = user_agent_build_version;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.config.core.v3.Node.user_agent_build_version)
}
void Node::clear_listening_addresses() {
  listening_addresses_.Clear();
}
Node::Node()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.config.core.v3.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      extensions_(from.extensions_),
      client_features_(from.client_features_),
      listening_addresses_(from.listening_addresses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  cluster_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.cluster().empty()) {
    cluster_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cluster_);
  }
  user_agent_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.user_agent_name().empty()) {
    user_agent_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_agent_name_);
  }
  if (from.has_metadata()) {
    metadata_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from.has_locality()) {
    locality_ = new ::envoy::config::core::v3::Locality(*from.locality_);
  } else {
    locality_ = nullptr;
  }
  clear_has_user_agent_version_type();
  switch (from.user_agent_version_type_case()) {
    case kUserAgentVersion: {
      set_user_agent_version(from.user_agent_version());
      break;
    }
    case kUserAgentBuildVersion: {
      mutable_user_agent_build_version()->::envoy::config::core::v3::BuildVersion::MergeFrom(from.user_agent_build_version());
      break;
    }
    case USER_AGENT_VERSION_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.config.core.v3.Node)
}

void Node::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Node_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cluster_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_agent_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locality_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(locality_));
  clear_has_user_agent_version_type();
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:envoy.config.core.v3.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cluster_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_agent_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete locality_;
  if (has_user_agent_version_type()) {
    clear_user_agent_version_type();
  }
}

void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node& Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Node_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  return *internal_default_instance();
}


void Node::clear_user_agent_version_type() {
// @@protoc_insertion_point(one_of_clear_start:envoy.config.core.v3.Node)
  switch (user_agent_version_type_case()) {
    case kUserAgentVersion: {
      user_agent_version_type_.user_agent_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kUserAgentBuildVersion: {
      delete user_agent_version_type_.user_agent_build_version_;
      break;
    }
    case USER_AGENT_VERSION_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = USER_AGENT_VERSION_TYPE_NOT_SET;
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.config.core.v3.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extensions_.Clear();
  client_features_.Clear();
  listening_addresses_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cluster_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_agent_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && locality_ != nullptr) {
    delete locality_;
  }
  locality_ = nullptr;
  clear_user_agent_version_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "envoy.config.core.v3.Node.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cluster = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cluster(), ptr, ctx, "envoy.config.core.v3.Node.cluster");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .envoy.config.core.v3.Locality locality = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_locality(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_agent_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_user_agent_name(), ptr, ctx, "envoy.config.core.v3.Node.user_agent_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_agent_version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_user_agent_version(), ptr, ctx, "envoy.config.core.v3.Node.user_agent_version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .envoy.config.core.v3.BuildVersion user_agent_build_version = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_user_agent_build_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .envoy.config.core.v3.Extension extensions = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_extensions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // repeated string client_features = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_client_features(), ptr, ctx, "envoy.config.core.v3.Node.client_features");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // repeated .envoy.config.core.v3.Address listening_addresses = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_listening_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Node::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.config.core.v3.Node)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "envoy.config.core.v3.Node.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cluster().data(), static_cast<int>(this->cluster().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "envoy.config.core.v3.Node.cluster"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct metadata = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.config.core.v3.Locality locality = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_locality()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_agent_name = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->user_agent_name().data(), static_cast<int>(this->user_agent_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "envoy.config.core.v3.Node.user_agent_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_agent_version = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent_version()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->user_agent_version().data(), static_cast<int>(this->user_agent_version().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "envoy.config.core.v3.Node.user_agent_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.config.core.v3.BuildVersion user_agent_build_version = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_agent_build_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.config.core.v3.Extension extensions = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_extensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string client_features = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_client_features()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->client_features(this->client_features_size() - 1).data(),
            static_cast<int>(this->client_features(this->client_features_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "envoy.config.core.v3.Node.client_features"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.config.core.v3.Address listening_addresses = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_listening_addresses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.config.core.v3.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.config.core.v3.Node)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Node::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.config.core.v3.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.Node.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string cluster = 2;
  if (this->cluster().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cluster().data(), static_cast<int>(this->cluster().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.Node.cluster");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster(), output);
  }

  // .google.protobuf.Struct metadata = 3;
  if (this->has_metadata()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::metadata(this), output);
  }

  // .envoy.config.core.v3.Locality locality = 4;
  if (this->has_locality()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::locality(this), output);
  }

  // string user_agent_name = 6;
  if (this->user_agent_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->user_agent_name().data(), static_cast<int>(this->user_agent_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.Node.user_agent_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->user_agent_name(), output);
  }

  // string user_agent_version = 7;
  if (has_user_agent_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->user_agent_version().data(), static_cast<int>(this->user_agent_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.Node.user_agent_version");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->user_agent_version(), output);
  }

  // .envoy.config.core.v3.BuildVersion user_agent_build_version = 8;
  if (has_user_agent_build_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::user_agent_build_version(this), output);
  }

  // repeated .envoy.config.core.v3.Extension extensions = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extensions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->extensions(static_cast<int>(i)),
      output);
  }

  // repeated string client_features = 10;
  for (int i = 0, n = this->client_features_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->client_features(i).data(), static_cast<int>(this->client_features(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.Node.client_features");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      10, this->client_features(i), output);
  }

  // repeated .envoy.config.core.v3.Address listening_addresses = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->listening_addresses_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->listening_addresses(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.config.core.v3.Node)
}

::PROTOBUF_NAMESPACE_ID::uint8* Node::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:envoy.config.core.v3.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.Node.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string cluster = 2;
  if (this->cluster().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cluster().data(), static_cast<int>(this->cluster().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.Node.cluster");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster(), target);
  }

  // .google.protobuf.Struct metadata = 3;
  if (this->has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::metadata(this), target);
  }

  // .envoy.config.core.v3.Locality locality = 4;
  if (this->has_locality()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::locality(this), target);
  }

  // string user_agent_name = 6;
  if (this->user_agent_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->user_agent_name().data(), static_cast<int>(this->user_agent_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.Node.user_agent_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->user_agent_name(), target);
  }

  // string user_agent_version = 7;
  if (has_user_agent_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->user_agent_version().data(), static_cast<int>(this->user_agent_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.Node.user_agent_version");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->user_agent_version(), target);
  }

  // .envoy.config.core.v3.BuildVersion user_agent_build_version = 8;
  if (has_user_agent_build_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::user_agent_build_version(this), target);
  }

  // repeated .envoy.config.core.v3.Extension extensions = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extensions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->extensions(static_cast<int>(i)), target);
  }

  // repeated string client_features = 10;
  for (int i = 0, n = this->client_features_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->client_features(i).data(), static_cast<int>(this->client_features(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.Node.client_features");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(10, this->client_features(i), target);
  }

  // repeated .envoy.config.core.v3.Address listening_addresses = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->listening_addresses_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->listening_addresses(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.config.core.v3.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.config.core.v3.Node)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .envoy.config.core.v3.Extension extensions = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->extensions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->extensions(static_cast<int>(i)));
    }
  }

  // repeated string client_features = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->client_features_size());
  for (int i = 0, n = this->client_features_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->client_features(i));
  }

  // repeated .envoy.config.core.v3.Address listening_addresses = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->listening_addresses_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->listening_addresses(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string cluster = 2;
  if (this->cluster().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cluster());
  }

  // string user_agent_name = 6;
  if (this->user_agent_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->user_agent_name());
  }

  // .google.protobuf.Struct metadata = 3;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .envoy.config.core.v3.Locality locality = 4;
  if (this->has_locality()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locality_);
  }

  switch (user_agent_version_type_case()) {
    // string user_agent_version = 7;
    case kUserAgentVersion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->user_agent_version());
      break;
    }
    // .envoy.config.core.v3.BuildVersion user_agent_build_version = 8;
    case kUserAgentBuildVersion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_agent_version_type_.user_agent_build_version_);
      break;
    }
    case USER_AGENT_VERSION_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.config.core.v3.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.config.core.v3.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.config.core.v3.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.config.core.v3.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extensions_.MergeFrom(from.extensions_);
  client_features_.MergeFrom(from.client_features_);
  listening_addresses_.MergeFrom(from.listening_addresses_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.cluster().size() > 0) {

    cluster_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cluster_);
  }
  if (from.user_agent_name().size() > 0) {

    user_agent_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_agent_name_);
  }
  if (from.has_metadata()) {
    mutable_metadata()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from.metadata());
  }
  if (from.has_locality()) {
    mutable_locality()->::envoy::config::core::v3::Locality::MergeFrom(from.locality());
  }
  switch (from.user_agent_version_type_case()) {
    case kUserAgentVersion: {
      set_user_agent_version(from.user_agent_version());
      break;
    }
    case kUserAgentBuildVersion: {
      mutable_user_agent_build_version()->::envoy::config::core::v3::BuildVersion::MergeFrom(from.user_agent_build_version());
      break;
    }
    case USER_AGENT_VERSION_TYPE_NOT_SET: {
      break;
    }
  }
}

void Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.config.core.v3.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.config.core.v3.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&extensions_)->InternalSwap(CastToBase(&other->extensions_));
  client_features_.InternalSwap(CastToBase(&other->client_features_));
  CastToBase(&listening_addresses_)->InternalSwap(CastToBase(&other->listening_addresses_));
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cluster_.Swap(&other->cluster_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_agent_name_.Swap(&other->user_agent_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(metadata_, other->metadata_);
  swap(locality_, other->locality_);
  swap(user_agent_version_type_, other->user_agent_version_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Metadata_FilterMetadataEntry_DoNotUse::Metadata_FilterMetadataEntry_DoNotUse() {}
Metadata_FilterMetadataEntry_DoNotUse::Metadata_FilterMetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Metadata_FilterMetadataEntry_DoNotUse::MergeFrom(const Metadata_FilterMetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Metadata_FilterMetadataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Metadata_FilterMetadataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Metadata::InitAsDefaultInstance() {
}
class Metadata::_Internal {
 public:
};

void Metadata::clear_filter_metadata() {
  filter_metadata_.Clear();
}
Metadata::Metadata()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.config.core.v3.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filter_metadata_.MergeFrom(from.filter_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.config.core.v3.Metadata)
}

void Metadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Metadata_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:envoy.config.core.v3.Metadata)
  SharedDtor();
}

void Metadata::SharedDtor() {
}

void Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Metadata& Metadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Metadata_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  return *internal_default_instance();
}


void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.config.core.v3.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_metadata_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .google.protobuf.Struct> filter_metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&filter_metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Metadata::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.config.core.v3.Metadata)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .google.protobuf.Struct> filter_metadata = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          Metadata_FilterMetadataEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Metadata_FilterMetadataEntry_DoNotUse,
              std::string, PROTOBUF_NAMESPACE_ID::Struct,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Struct > > parser(&filter_metadata_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "envoy.config.core.v3.Metadata.FilterMetadataEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.config.core.v3.Metadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.config.core.v3.Metadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Metadata::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.config.core.v3.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .google.protobuf.Struct> filter_metadata = 1;
  if (!this->filter_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Struct >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "envoy.config.core.v3.Metadata.FilterMetadataEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->filter_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->filter_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Struct >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Struct >::const_iterator
          it = this->filter_metadata().begin();
          it != this->filter_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Metadata_FilterMetadataEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Struct >::const_iterator
          it = this->filter_metadata().begin();
          it != this->filter_metadata().end(); ++it) {
        Metadata_FilterMetadataEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.config.core.v3.Metadata)
}

::PROTOBUF_NAMESPACE_ID::uint8* Metadata::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:envoy.config.core.v3.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .google.protobuf.Struct> filter_metadata = 1;
  if (!this->filter_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Struct >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "envoy.config.core.v3.Metadata.FilterMetadataEntry.key");
      }
    };

    if (false &&
        this->filter_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->filter_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Struct >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Struct >::const_iterator
          it = this->filter_metadata().begin();
          it != this->filter_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Metadata_FilterMetadataEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Struct >::const_iterator
          it = this->filter_metadata().begin();
          it != this->filter_metadata().end(); ++it) {
        target = Metadata_FilterMetadataEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.config.core.v3.Metadata)
  return target;
}

size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.config.core.v3.Metadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .google.protobuf.Struct> filter_metadata = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->filter_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Struct >::const_iterator
      it = this->filter_metadata().begin();
      it != this->filter_metadata().end(); ++it) {
    total_size += Metadata_FilterMetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Metadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.config.core.v3.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  const Metadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Metadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.config.core.v3.Metadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.config.core.v3.Metadata)
    MergeFrom(*source);
  }
}

void Metadata::MergeFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.config.core.v3.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filter_metadata_.MergeFrom(from.filter_metadata_);
}

void Metadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.config.core.v3.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.config.core.v3.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filter_metadata_.Swap(&other->filter_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RuntimeUInt32::InitAsDefaultInstance() {
}
class RuntimeUInt32::_Internal {
 public:
};

RuntimeUInt32::RuntimeUInt32()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.config.core.v3.RuntimeUInt32)
}
RuntimeUInt32::RuntimeUInt32(const RuntimeUInt32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  runtime_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.runtime_key().empty()) {
    runtime_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.runtime_key_);
  }
  default_value_ = from.default_value_;
  // @@protoc_insertion_point(copy_constructor:envoy.config.core.v3.RuntimeUInt32)
}

void RuntimeUInt32::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RuntimeUInt32_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  runtime_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_value_ = 0u;
}

RuntimeUInt32::~RuntimeUInt32() {
  // @@protoc_insertion_point(destructor:envoy.config.core.v3.RuntimeUInt32)
  SharedDtor();
}

void RuntimeUInt32::SharedDtor() {
  runtime_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RuntimeUInt32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuntimeUInt32& RuntimeUInt32::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuntimeUInt32_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  return *internal_default_instance();
}


void RuntimeUInt32::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.config.core.v3.RuntimeUInt32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  runtime_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_value_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RuntimeUInt32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 default_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          default_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string runtime_key = 3 [(.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_runtime_key(), ptr, ctx, "envoy.config.core.v3.RuntimeUInt32.runtime_key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RuntimeUInt32::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.config.core.v3.RuntimeUInt32)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 default_value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string runtime_key = 3 [(.validate.rules) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_runtime_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->runtime_key().data(), static_cast<int>(this->runtime_key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "envoy.config.core.v3.RuntimeUInt32.runtime_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.config.core.v3.RuntimeUInt32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.config.core.v3.RuntimeUInt32)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RuntimeUInt32::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.config.core.v3.RuntimeUInt32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 default_value = 2;
  if (this->default_value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->default_value(), output);
  }

  // string runtime_key = 3 [(.validate.rules) = {
  if (this->runtime_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_key().data(), static_cast<int>(this->runtime_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.RuntimeUInt32.runtime_key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->runtime_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.config.core.v3.RuntimeUInt32)
}

::PROTOBUF_NAMESPACE_ID::uint8* RuntimeUInt32::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:envoy.config.core.v3.RuntimeUInt32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 default_value = 2;
  if (this->default_value() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->default_value(), target);
  }

  // string runtime_key = 3 [(.validate.rules) = {
  if (this->runtime_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_key().data(), static_cast<int>(this->runtime_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.RuntimeUInt32.runtime_key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->runtime_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.config.core.v3.RuntimeUInt32)
  return target;
}

size_t RuntimeUInt32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.config.core.v3.RuntimeUInt32)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string runtime_key = 3 [(.validate.rules) = {
  if (this->runtime_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->runtime_key());
  }

  // uint32 default_value = 2;
  if (this->default_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->default_value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuntimeUInt32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.config.core.v3.RuntimeUInt32)
  GOOGLE_DCHECK_NE(&from, this);
  const RuntimeUInt32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuntimeUInt32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.config.core.v3.RuntimeUInt32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.config.core.v3.RuntimeUInt32)
    MergeFrom(*source);
  }
}

void RuntimeUInt32::MergeFrom(const RuntimeUInt32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.config.core.v3.RuntimeUInt32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.runtime_key().size() > 0) {

    runtime_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.runtime_key_);
  }
  if (from.default_value() != 0) {
    set_default_value(from.default_value());
  }
}

void RuntimeUInt32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.config.core.v3.RuntimeUInt32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuntimeUInt32::CopyFrom(const RuntimeUInt32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.config.core.v3.RuntimeUInt32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeUInt32::IsInitialized() const {
  return true;
}

void RuntimeUInt32::InternalSwap(RuntimeUInt32* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  runtime_key_.Swap(&other->runtime_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(default_value_, other->default_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuntimeUInt32::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RuntimeFeatureFlag::InitAsDefaultInstance() {
  ::envoy::config::core::v3::_RuntimeFeatureFlag_default_instance_._instance.get_mutable()->default_value_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
}
class RuntimeFeatureFlag::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::BoolValue& default_value(const RuntimeFeatureFlag* msg);
};

const PROTOBUF_NAMESPACE_ID::BoolValue&
RuntimeFeatureFlag::_Internal::default_value(const RuntimeFeatureFlag* msg) {
  return *msg->default_value_;
}
void RuntimeFeatureFlag::clear_default_value() {
  if (GetArenaNoVirtual() == nullptr && default_value_ != nullptr) {
    delete default_value_;
  }
  default_value_ = nullptr;
}
RuntimeFeatureFlag::RuntimeFeatureFlag()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.config.core.v3.RuntimeFeatureFlag)
}
RuntimeFeatureFlag::RuntimeFeatureFlag(const RuntimeFeatureFlag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  runtime_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.runtime_key().empty()) {
    runtime_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.runtime_key_);
  }
  if (from.has_default_value()) {
    default_value_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.default_value_);
  } else {
    default_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.config.core.v3.RuntimeFeatureFlag)
}

void RuntimeFeatureFlag::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RuntimeFeatureFlag_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  runtime_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_value_ = nullptr;
}

RuntimeFeatureFlag::~RuntimeFeatureFlag() {
  // @@protoc_insertion_point(destructor:envoy.config.core.v3.RuntimeFeatureFlag)
  SharedDtor();
}

void RuntimeFeatureFlag::SharedDtor() {
  runtime_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete default_value_;
}

void RuntimeFeatureFlag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuntimeFeatureFlag& RuntimeFeatureFlag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuntimeFeatureFlag_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  return *internal_default_instance();
}


void RuntimeFeatureFlag::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.config.core.v3.RuntimeFeatureFlag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  runtime_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && default_value_ != nullptr) {
    delete default_value_;
  }
  default_value_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RuntimeFeatureFlag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue default_value = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_default_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string runtime_key = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_runtime_key(), ptr, ctx, "envoy.config.core.v3.RuntimeFeatureFlag.runtime_key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RuntimeFeatureFlag::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.config.core.v3.RuntimeFeatureFlag)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.BoolValue default_value = 1 [(.validate.rules) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_default_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string runtime_key = 2 [(.validate.rules) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_runtime_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->runtime_key().data(), static_cast<int>(this->runtime_key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "envoy.config.core.v3.RuntimeFeatureFlag.runtime_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.config.core.v3.RuntimeFeatureFlag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.config.core.v3.RuntimeFeatureFlag)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RuntimeFeatureFlag::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.config.core.v3.RuntimeFeatureFlag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue default_value = 1 [(.validate.rules) = {
  if (this->has_default_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::default_value(this), output);
  }

  // string runtime_key = 2 [(.validate.rules) = {
  if (this->runtime_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_key().data(), static_cast<int>(this->runtime_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.RuntimeFeatureFlag.runtime_key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->runtime_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.config.core.v3.RuntimeFeatureFlag)
}

::PROTOBUF_NAMESPACE_ID::uint8* RuntimeFeatureFlag::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:envoy.config.core.v3.RuntimeFeatureFlag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue default_value = 1 [(.validate.rules) = {
  if (this->has_default_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::default_value(this), target);
  }

  // string runtime_key = 2 [(.validate.rules) = {
  if (this->runtime_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_key().data(), static_cast<int>(this->runtime_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.RuntimeFeatureFlag.runtime_key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->runtime_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.config.core.v3.RuntimeFeatureFlag)
  return target;
}

size_t RuntimeFeatureFlag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.config.core.v3.RuntimeFeatureFlag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string runtime_key = 2 [(.validate.rules) = {
  if (this->runtime_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->runtime_key());
  }

  // .google.protobuf.BoolValue default_value = 1 [(.validate.rules) = {
  if (this->has_default_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *default_value_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuntimeFeatureFlag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.config.core.v3.RuntimeFeatureFlag)
  GOOGLE_DCHECK_NE(&from, this);
  const RuntimeFeatureFlag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuntimeFeatureFlag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.config.core.v3.RuntimeFeatureFlag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.config.core.v3.RuntimeFeatureFlag)
    MergeFrom(*source);
  }
}

void RuntimeFeatureFlag::MergeFrom(const RuntimeFeatureFlag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.config.core.v3.RuntimeFeatureFlag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.runtime_key().size() > 0) {

    runtime_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.runtime_key_);
  }
  if (from.has_default_value()) {
    mutable_default_value()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from.default_value());
  }
}

void RuntimeFeatureFlag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.config.core.v3.RuntimeFeatureFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuntimeFeatureFlag::CopyFrom(const RuntimeFeatureFlag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.config.core.v3.RuntimeFeatureFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeFeatureFlag::IsInitialized() const {
  return true;
}

void RuntimeFeatureFlag::InternalSwap(RuntimeFeatureFlag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  runtime_key_.Swap(&other->runtime_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(default_value_, other->default_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuntimeFeatureFlag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeaderValue::InitAsDefaultInstance() {
}
class HeaderValue::_Internal {
 public:
};

HeaderValue::HeaderValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.config.core.v3.HeaderValue)
}
HeaderValue::HeaderValue(const HeaderValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.config.core.v3.HeaderValue)
}

void HeaderValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HeaderValue_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HeaderValue::~HeaderValue() {
  // @@protoc_insertion_point(destructor:envoy.config.core.v3.HeaderValue)
  SharedDtor();
}

void HeaderValue::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HeaderValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeaderValue& HeaderValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeaderValue_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  return *internal_default_instance();
}


void HeaderValue::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.config.core.v3.HeaderValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HeaderValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_key(), ptr, ctx, "envoy.config.core.v3.HeaderValue.key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_value(), ptr, ctx, "envoy.config.core.v3.HeaderValue.value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HeaderValue::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.config.core.v3.HeaderValue)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1 [(.validate.rules) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "envoy.config.core.v3.HeaderValue.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2 [(.validate.rules) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "envoy.config.core.v3.HeaderValue.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.config.core.v3.HeaderValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.config.core.v3.HeaderValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HeaderValue::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.config.core.v3.HeaderValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1 [(.validate.rules) = {
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.HeaderValue.key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2 [(.validate.rules) = {
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.HeaderValue.value");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.config.core.v3.HeaderValue)
}

::PROTOBUF_NAMESPACE_ID::uint8* HeaderValue::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:envoy.config.core.v3.HeaderValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1 [(.validate.rules) = {
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.HeaderValue.key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2 [(.validate.rules) = {
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.HeaderValue.value");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.config.core.v3.HeaderValue)
  return target;
}

size_t HeaderValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.config.core.v3.HeaderValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1 [(.validate.rules) = {
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2 [(.validate.rules) = {
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeaderValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.config.core.v3.HeaderValue)
  GOOGLE_DCHECK_NE(&from, this);
  const HeaderValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeaderValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.config.core.v3.HeaderValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.config.core.v3.HeaderValue)
    MergeFrom(*source);
  }
}

void HeaderValue::MergeFrom(const HeaderValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.config.core.v3.HeaderValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void HeaderValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.config.core.v3.HeaderValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeaderValue::CopyFrom(const HeaderValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.config.core.v3.HeaderValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderValue::IsInitialized() const {
  return true;
}

void HeaderValue::InternalSwap(HeaderValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeaderValueOption::InitAsDefaultInstance() {
  ::envoy::config::core::v3::_HeaderValueOption_default_instance_._instance.get_mutable()->header_ = const_cast< ::envoy::config::core::v3::HeaderValue*>(
      ::envoy::config::core::v3::HeaderValue::internal_default_instance());
  ::envoy::config::core::v3::_HeaderValueOption_default_instance_._instance.get_mutable()->append_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
}
class HeaderValueOption::_Internal {
 public:
  static const ::envoy::config::core::v3::HeaderValue& header(const HeaderValueOption* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& append(const HeaderValueOption* msg);
};

const ::envoy::config::core::v3::HeaderValue&
HeaderValueOption::_Internal::header(const HeaderValueOption* msg) {
  return *msg->header_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
HeaderValueOption::_Internal::append(const HeaderValueOption* msg) {
  return *msg->append_;
}
void HeaderValueOption::clear_append() {
  if (GetArenaNoVirtual() == nullptr && append_ != nullptr) {
    delete append_;
  }
  append_ = nullptr;
}
HeaderValueOption::HeaderValueOption()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.config.core.v3.HeaderValueOption)
}
HeaderValueOption::HeaderValueOption(const HeaderValueOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::envoy::config::core::v3::HeaderValue(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_append()) {
    append_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.append_);
  } else {
    append_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.config.core.v3.HeaderValueOption)
}

void HeaderValueOption::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HeaderValueOption_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&append_) -
      reinterpret_cast<char*>(&header_)) + sizeof(append_));
}

HeaderValueOption::~HeaderValueOption() {
  // @@protoc_insertion_point(destructor:envoy.config.core.v3.HeaderValueOption)
  SharedDtor();
}

void HeaderValueOption::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete append_;
}

void HeaderValueOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeaderValueOption& HeaderValueOption::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeaderValueOption_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  return *internal_default_instance();
}


void HeaderValueOption::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.config.core.v3.HeaderValueOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && append_ != nullptr) {
    delete append_;
  }
  append_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HeaderValueOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .envoy.config.core.v3.HeaderValue header = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue append = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_append(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HeaderValueOption::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.config.core.v3.HeaderValueOption)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.config.core.v3.HeaderValue header = 1 [(.validate.rules) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue append = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_append()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.config.core.v3.HeaderValueOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.config.core.v3.HeaderValueOption)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HeaderValueOption::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.config.core.v3.HeaderValueOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.config.core.v3.HeaderValue header = 1 [(.validate.rules) = {
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // .google.protobuf.BoolValue append = 2;
  if (this->has_append()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::append(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.config.core.v3.HeaderValueOption)
}

::PROTOBUF_NAMESPACE_ID::uint8* HeaderValueOption::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:envoy.config.core.v3.HeaderValueOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.config.core.v3.HeaderValue header = 1 [(.validate.rules) = {
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // .google.protobuf.BoolValue append = 2;
  if (this->has_append()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::append(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.config.core.v3.HeaderValueOption)
  return target;
}

size_t HeaderValueOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.config.core.v3.HeaderValueOption)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .envoy.config.core.v3.HeaderValue header = 1 [(.validate.rules) = {
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .google.protobuf.BoolValue append = 2;
  if (this->has_append()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *append_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeaderValueOption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.config.core.v3.HeaderValueOption)
  GOOGLE_DCHECK_NE(&from, this);
  const HeaderValueOption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeaderValueOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.config.core.v3.HeaderValueOption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.config.core.v3.HeaderValueOption)
    MergeFrom(*source);
  }
}

void HeaderValueOption::MergeFrom(const HeaderValueOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.config.core.v3.HeaderValueOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::envoy::config::core::v3::HeaderValue::MergeFrom(from.header());
  }
  if (from.has_append()) {
    mutable_append()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from.append());
  }
}

void HeaderValueOption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.config.core.v3.HeaderValueOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeaderValueOption::CopyFrom(const HeaderValueOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.config.core.v3.HeaderValueOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderValueOption::IsInitialized() const {
  return true;
}

void HeaderValueOption::InternalSwap(HeaderValueOption* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(append_, other->append_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderValueOption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeaderMap::InitAsDefaultInstance() {
}
class HeaderMap::_Internal {
 public:
};

HeaderMap::HeaderMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.config.core.v3.HeaderMap)
}
HeaderMap::HeaderMap(const HeaderMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.config.core.v3.HeaderMap)
}

void HeaderMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HeaderMap_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
}

HeaderMap::~HeaderMap() {
  // @@protoc_insertion_point(destructor:envoy.config.core.v3.HeaderMap)
  SharedDtor();
}

void HeaderMap::SharedDtor() {
}

void HeaderMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeaderMap& HeaderMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeaderMap_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  return *internal_default_instance();
}


void HeaderMap::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.config.core.v3.HeaderMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HeaderMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .envoy.config.core.v3.HeaderValue headers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HeaderMap::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.config.core.v3.HeaderMap)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.config.core.v3.HeaderValue headers = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.config.core.v3.HeaderMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.config.core.v3.HeaderMap)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HeaderMap::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.config.core.v3.HeaderMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.config.core.v3.HeaderValue headers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->headers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.config.core.v3.HeaderMap)
}

::PROTOBUF_NAMESPACE_ID::uint8* HeaderMap::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:envoy.config.core.v3.HeaderMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.config.core.v3.HeaderValue headers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->headers(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.config.core.v3.HeaderMap)
  return target;
}

size_t HeaderMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.config.core.v3.HeaderMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .envoy.config.core.v3.HeaderValue headers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->headers(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeaderMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.config.core.v3.HeaderMap)
  GOOGLE_DCHECK_NE(&from, this);
  const HeaderMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeaderMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.config.core.v3.HeaderMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.config.core.v3.HeaderMap)
    MergeFrom(*source);
  }
}

void HeaderMap::MergeFrom(const HeaderMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.config.core.v3.HeaderMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
}

void HeaderMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.config.core.v3.HeaderMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeaderMap::CopyFrom(const HeaderMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.config.core.v3.HeaderMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderMap::IsInitialized() const {
  return true;
}

void HeaderMap::InternalSwap(HeaderMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&headers_)->InternalSwap(CastToBase(&other->headers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataSource::InitAsDefaultInstance() {
  ::envoy::config::core::v3::_DataSource_default_instance_.filename_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::envoy::config::core::v3::_DataSource_default_instance_.inline_bytes_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::envoy::config::core::v3::_DataSource_default_instance_.inline_string_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class DataSource::_Internal {
 public:
};

DataSource::DataSource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.config.core.v3.DataSource)
}
DataSource::DataSource(const DataSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_specifier();
  switch (from.specifier_case()) {
    case kFilename: {
      set_filename(from.filename());
      break;
    }
    case kInlineBytes: {
      set_inline_bytes(from.inline_bytes());
      break;
    }
    case kInlineString: {
      set_inline_string(from.inline_string());
      break;
    }
    case SPECIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.config.core.v3.DataSource)
}

void DataSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataSource_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  clear_has_specifier();
}

DataSource::~DataSource() {
  // @@protoc_insertion_point(destructor:envoy.config.core.v3.DataSource)
  SharedDtor();
}

void DataSource::SharedDtor() {
  if (has_specifier()) {
    clear_specifier();
  }
}

void DataSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataSource& DataSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataSource_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  return *internal_default_instance();
}


void DataSource::clear_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.config.core.v3.DataSource)
  switch (specifier_case()) {
    case kFilename: {
      specifier_.filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kInlineBytes: {
      specifier_.inline_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kInlineString: {
      specifier_.inline_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SPECIFIER_NOT_SET;
}


void DataSource::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.config.core.v3.DataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_specifier();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DataSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filename = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_filename(), ptr, ctx, "envoy.config.core.v3.DataSource.filename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes inline_bytes = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_inline_bytes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string inline_string = 3 [(.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_inline_string(), ptr, ctx, "envoy.config.core.v3.DataSource.inline_string");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DataSource::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.config.core.v3.DataSource)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string filename = 1 [(.validate.rules) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "envoy.config.core.v3.DataSource.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes inline_bytes = 2 [(.validate.rules) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_inline_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string inline_string = 3 [(.validate.rules) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_inline_string()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->inline_string().data(), static_cast<int>(this->inline_string().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "envoy.config.core.v3.DataSource.inline_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.config.core.v3.DataSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.config.core.v3.DataSource)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DataSource::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.config.core.v3.DataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1 [(.validate.rules) = {
  if (has_filename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.DataSource.filename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // bytes inline_bytes = 2 [(.validate.rules) = {
  if (has_inline_bytes()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->inline_bytes(), output);
  }

  // string inline_string = 3 [(.validate.rules) = {
  if (has_inline_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->inline_string().data(), static_cast<int>(this->inline_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.DataSource.inline_string");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->inline_string(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.config.core.v3.DataSource)
}

::PROTOBUF_NAMESPACE_ID::uint8* DataSource::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:envoy.config.core.v3.DataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1 [(.validate.rules) = {
  if (has_filename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.DataSource.filename");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // bytes inline_bytes = 2 [(.validate.rules) = {
  if (has_inline_bytes()) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->inline_bytes(), target);
  }

  // string inline_string = 3 [(.validate.rules) = {
  if (has_inline_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->inline_string().data(), static_cast<int>(this->inline_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.DataSource.inline_string");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->inline_string(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.config.core.v3.DataSource)
  return target;
}

size_t DataSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.config.core.v3.DataSource)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (specifier_case()) {
    // string filename = 1 [(.validate.rules) = {
    case kFilename: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->filename());
      break;
    }
    // bytes inline_bytes = 2 [(.validate.rules) = {
    case kInlineBytes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->inline_bytes());
      break;
    }
    // string inline_string = 3 [(.validate.rules) = {
    case kInlineString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->inline_string());
      break;
    }
    case SPECIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.config.core.v3.DataSource)
  GOOGLE_DCHECK_NE(&from, this);
  const DataSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.config.core.v3.DataSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.config.core.v3.DataSource)
    MergeFrom(*source);
  }
}

void DataSource::MergeFrom(const DataSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.config.core.v3.DataSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.specifier_case()) {
    case kFilename: {
      set_filename(from.filename());
      break;
    }
    case kInlineBytes: {
      set_inline_bytes(from.inline_bytes());
      break;
    }
    case kInlineString: {
      set_inline_string(from.inline_string());
      break;
    }
    case SPECIFIER_NOT_SET: {
      break;
    }
  }
}

void DataSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.config.core.v3.DataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSource::CopyFrom(const DataSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.config.core.v3.DataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSource::IsInitialized() const {
  return true;
}

void DataSource::InternalSwap(DataSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(specifier_, other->specifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RetryPolicy::InitAsDefaultInstance() {
  ::envoy::config::core::v3::_RetryPolicy_default_instance_._instance.get_mutable()->retry_back_off_ = const_cast< ::envoy::config::core::v3::BackoffStrategy*>(
      ::envoy::config::core::v3::BackoffStrategy::internal_default_instance());
  ::envoy::config::core::v3::_RetryPolicy_default_instance_._instance.get_mutable()->num_retries_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      PROTOBUF_NAMESPACE_ID::UInt32Value::internal_default_instance());
}
class RetryPolicy::_Internal {
 public:
  static const ::envoy::config::core::v3::BackoffStrategy& retry_back_off(const RetryPolicy* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& num_retries(const RetryPolicy* msg);
};

const ::envoy::config::core::v3::BackoffStrategy&
RetryPolicy::_Internal::retry_back_off(const RetryPolicy* msg) {
  return *msg->retry_back_off_;
}
const PROTOBUF_NAMESPACE_ID::UInt32Value&
RetryPolicy::_Internal::num_retries(const RetryPolicy* msg) {
  return *msg->num_retries_;
}
void RetryPolicy::clear_retry_back_off() {
  if (GetArenaNoVirtual() == nullptr && retry_back_off_ != nullptr) {
    delete retry_back_off_;
  }
  retry_back_off_ = nullptr;
}
void RetryPolicy::clear_num_retries() {
  if (GetArenaNoVirtual() == nullptr && num_retries_ != nullptr) {
    delete num_retries_;
  }
  num_retries_ = nullptr;
}
RetryPolicy::RetryPolicy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.config.core.v3.RetryPolicy)
}
RetryPolicy::RetryPolicy(const RetryPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_retry_back_off()) {
    retry_back_off_ = new ::envoy::config::core::v3::BackoffStrategy(*from.retry_back_off_);
  } else {
    retry_back_off_ = nullptr;
  }
  if (from.has_num_retries()) {
    num_retries_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.num_retries_);
  } else {
    num_retries_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.config.core.v3.RetryPolicy)
}

void RetryPolicy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RetryPolicy_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  ::memset(&retry_back_off_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_retries_) -
      reinterpret_cast<char*>(&retry_back_off_)) + sizeof(num_retries_));
}

RetryPolicy::~RetryPolicy() {
  // @@protoc_insertion_point(destructor:envoy.config.core.v3.RetryPolicy)
  SharedDtor();
}

void RetryPolicy::SharedDtor() {
  if (this != internal_default_instance()) delete retry_back_off_;
  if (this != internal_default_instance()) delete num_retries_;
}

void RetryPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetryPolicy& RetryPolicy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RetryPolicy_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  return *internal_default_instance();
}


void RetryPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.config.core.v3.RetryPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && retry_back_off_ != nullptr) {
    delete retry_back_off_;
  }
  retry_back_off_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && num_retries_ != nullptr) {
    delete num_retries_;
  }
  num_retries_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RetryPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .envoy.config.core.v3.BackoffStrategy retry_back_off = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_retry_back_off(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value num_retries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_num_retries(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RetryPolicy::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.config.core.v3.RetryPolicy)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.config.core.v3.BackoffStrategy retry_back_off = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_retry_back_off()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value num_retries = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_num_retries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.config.core.v3.RetryPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.config.core.v3.RetryPolicy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RetryPolicy::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.config.core.v3.RetryPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.config.core.v3.BackoffStrategy retry_back_off = 1;
  if (this->has_retry_back_off()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::retry_back_off(this), output);
  }

  // .google.protobuf.UInt32Value num_retries = 2;
  if (this->has_num_retries()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::num_retries(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.config.core.v3.RetryPolicy)
}

::PROTOBUF_NAMESPACE_ID::uint8* RetryPolicy::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:envoy.config.core.v3.RetryPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.config.core.v3.BackoffStrategy retry_back_off = 1;
  if (this->has_retry_back_off()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::retry_back_off(this), target);
  }

  // .google.protobuf.UInt32Value num_retries = 2;
  if (this->has_num_retries()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::num_retries(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.config.core.v3.RetryPolicy)
  return target;
}

size_t RetryPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.config.core.v3.RetryPolicy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .envoy.config.core.v3.BackoffStrategy retry_back_off = 1;
  if (this->has_retry_back_off()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *retry_back_off_);
  }

  // .google.protobuf.UInt32Value num_retries = 2;
  if (this->has_num_retries()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *num_retries_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetryPolicy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.config.core.v3.RetryPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const RetryPolicy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RetryPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.config.core.v3.RetryPolicy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.config.core.v3.RetryPolicy)
    MergeFrom(*source);
  }
}

void RetryPolicy::MergeFrom(const RetryPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.config.core.v3.RetryPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_retry_back_off()) {
    mutable_retry_back_off()->::envoy::config::core::v3::BackoffStrategy::MergeFrom(from.retry_back_off());
  }
  if (from.has_num_retries()) {
    mutable_num_retries()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from.num_retries());
  }
}

void RetryPolicy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.config.core.v3.RetryPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetryPolicy::CopyFrom(const RetryPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.config.core.v3.RetryPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetryPolicy::IsInitialized() const {
  return true;
}

void RetryPolicy::InternalSwap(RetryPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(retry_back_off_, other->retry_back_off_);
  swap(num_retries_, other->num_retries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RetryPolicy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoteDataSource::InitAsDefaultInstance() {
  ::envoy::config::core::v3::_RemoteDataSource_default_instance_._instance.get_mutable()->http_uri_ = const_cast< ::envoy::config::core::v3::HttpUri*>(
      ::envoy::config::core::v3::HttpUri::internal_default_instance());
  ::envoy::config::core::v3::_RemoteDataSource_default_instance_._instance.get_mutable()->retry_policy_ = const_cast< ::envoy::config::core::v3::RetryPolicy*>(
      ::envoy::config::core::v3::RetryPolicy::internal_default_instance());
}
class RemoteDataSource::_Internal {
 public:
  static const ::envoy::config::core::v3::HttpUri& http_uri(const RemoteDataSource* msg);
  static const ::envoy::config::core::v3::RetryPolicy& retry_policy(const RemoteDataSource* msg);
};

const ::envoy::config::core::v3::HttpUri&
RemoteDataSource::_Internal::http_uri(const RemoteDataSource* msg) {
  return *msg->http_uri_;
}
const ::envoy::config::core::v3::RetryPolicy&
RemoteDataSource::_Internal::retry_policy(const RemoteDataSource* msg) {
  return *msg->retry_policy_;
}
void RemoteDataSource::clear_http_uri() {
  if (GetArenaNoVirtual() == nullptr && http_uri_ != nullptr) {
    delete http_uri_;
  }
  http_uri_ = nullptr;
}
RemoteDataSource::RemoteDataSource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.config.core.v3.RemoteDataSource)
}
RemoteDataSource::RemoteDataSource(const RemoteDataSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha256_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sha256().empty()) {
    sha256_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sha256_);
  }
  if (from.has_http_uri()) {
    http_uri_ = new ::envoy::config::core::v3::HttpUri(*from.http_uri_);
  } else {
    http_uri_ = nullptr;
  }
  if (from.has_retry_policy()) {
    retry_policy_ = new ::envoy::config::core::v3::RetryPolicy(*from.retry_policy_);
  } else {
    retry_policy_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.config.core.v3.RemoteDataSource)
}

void RemoteDataSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteDataSource_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  sha256_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&http_uri_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retry_policy_) -
      reinterpret_cast<char*>(&http_uri_)) + sizeof(retry_policy_));
}

RemoteDataSource::~RemoteDataSource() {
  // @@protoc_insertion_point(destructor:envoy.config.core.v3.RemoteDataSource)
  SharedDtor();
}

void RemoteDataSource::SharedDtor() {
  sha256_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete http_uri_;
  if (this != internal_default_instance()) delete retry_policy_;
}

void RemoteDataSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteDataSource& RemoteDataSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteDataSource_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  return *internal_default_instance();
}


void RemoteDataSource::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.config.core.v3.RemoteDataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sha256_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && http_uri_ != nullptr) {
    delete http_uri_;
  }
  http_uri_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && retry_policy_ != nullptr) {
    delete retry_policy_;
  }
  retry_policy_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RemoteDataSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .envoy.config.core.v3.HttpUri http_uri = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_http_uri(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sha256 = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sha256(), ptr, ctx, "envoy.config.core.v3.RemoteDataSource.sha256");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .envoy.config.core.v3.RetryPolicy retry_policy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_retry_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RemoteDataSource::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.config.core.v3.RemoteDataSource)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.config.core.v3.HttpUri http_uri = 1 [(.validate.rules) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_http_uri()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sha256 = 2 [(.validate.rules) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sha256()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sha256().data(), static_cast<int>(this->sha256().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "envoy.config.core.v3.RemoteDataSource.sha256"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.config.core.v3.RetryPolicy retry_policy = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_retry_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.config.core.v3.RemoteDataSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.config.core.v3.RemoteDataSource)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RemoteDataSource::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.config.core.v3.RemoteDataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.config.core.v3.HttpUri http_uri = 1 [(.validate.rules) = {
  if (this->has_http_uri()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::http_uri(this), output);
  }

  // string sha256 = 2 [(.validate.rules) = {
  if (this->sha256().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sha256().data(), static_cast<int>(this->sha256().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.RemoteDataSource.sha256");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sha256(), output);
  }

  // .envoy.config.core.v3.RetryPolicy retry_policy = 3;
  if (this->has_retry_policy()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::retry_policy(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.config.core.v3.RemoteDataSource)
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteDataSource::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:envoy.config.core.v3.RemoteDataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.config.core.v3.HttpUri http_uri = 1 [(.validate.rules) = {
  if (this->has_http_uri()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::http_uri(this), target);
  }

  // string sha256 = 2 [(.validate.rules) = {
  if (this->sha256().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sha256().data(), static_cast<int>(this->sha256().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.RemoteDataSource.sha256");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->sha256(), target);
  }

  // .envoy.config.core.v3.RetryPolicy retry_policy = 3;
  if (this->has_retry_policy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::retry_policy(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.config.core.v3.RemoteDataSource)
  return target;
}

size_t RemoteDataSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.config.core.v3.RemoteDataSource)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sha256 = 2 [(.validate.rules) = {
  if (this->sha256().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sha256());
  }

  // .envoy.config.core.v3.HttpUri http_uri = 1 [(.validate.rules) = {
  if (this->has_http_uri()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *http_uri_);
  }

  // .envoy.config.core.v3.RetryPolicy retry_policy = 3;
  if (this->has_retry_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *retry_policy_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteDataSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.config.core.v3.RemoteDataSource)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteDataSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteDataSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.config.core.v3.RemoteDataSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.config.core.v3.RemoteDataSource)
    MergeFrom(*source);
  }
}

void RemoteDataSource::MergeFrom(const RemoteDataSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.config.core.v3.RemoteDataSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sha256().size() > 0) {

    sha256_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sha256_);
  }
  if (from.has_http_uri()) {
    mutable_http_uri()->::envoy::config::core::v3::HttpUri::MergeFrom(from.http_uri());
  }
  if (from.has_retry_policy()) {
    mutable_retry_policy()->::envoy::config::core::v3::RetryPolicy::MergeFrom(from.retry_policy());
  }
}

void RemoteDataSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.config.core.v3.RemoteDataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteDataSource::CopyFrom(const RemoteDataSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.config.core.v3.RemoteDataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteDataSource::IsInitialized() const {
  return true;
}

void RemoteDataSource::InternalSwap(RemoteDataSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sha256_.Swap(&other->sha256_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(http_uri_, other->http_uri_);
  swap(retry_policy_, other->retry_policy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteDataSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AsyncDataSource::InitAsDefaultInstance() {
  ::envoy::config::core::v3::_AsyncDataSource_default_instance_.local_ = const_cast< ::envoy::config::core::v3::DataSource*>(
      ::envoy::config::core::v3::DataSource::internal_default_instance());
  ::envoy::config::core::v3::_AsyncDataSource_default_instance_.remote_ = const_cast< ::envoy::config::core::v3::RemoteDataSource*>(
      ::envoy::config::core::v3::RemoteDataSource::internal_default_instance());
}
class AsyncDataSource::_Internal {
 public:
  static const ::envoy::config::core::v3::DataSource& local(const AsyncDataSource* msg);
  static const ::envoy::config::core::v3::RemoteDataSource& remote(const AsyncDataSource* msg);
};

const ::envoy::config::core::v3::DataSource&
AsyncDataSource::_Internal::local(const AsyncDataSource* msg) {
  return *msg->specifier_.local_;
}
const ::envoy::config::core::v3::RemoteDataSource&
AsyncDataSource::_Internal::remote(const AsyncDataSource* msg) {
  return *msg->specifier_.remote_;
}
void AsyncDataSource::set_allocated_local(::envoy::config::core::v3::DataSource* local) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifier();
  if (local) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local, submessage_arena);
    }
    set_has_local();
    specifier_.local_ = local;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.config.core.v3.AsyncDataSource.local)
}
void AsyncDataSource::set_allocated_remote(::envoy::config::core::v3::RemoteDataSource* remote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifier();
  if (remote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      remote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote, submessage_arena);
    }
    set_has_remote();
    specifier_.remote_ = remote;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.config.core.v3.AsyncDataSource.remote)
}
AsyncDataSource::AsyncDataSource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.config.core.v3.AsyncDataSource)
}
AsyncDataSource::AsyncDataSource(const AsyncDataSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_specifier();
  switch (from.specifier_case()) {
    case kLocal: {
      mutable_local()->::envoy::config::core::v3::DataSource::MergeFrom(from.local());
      break;
    }
    case kRemote: {
      mutable_remote()->::envoy::config::core::v3::RemoteDataSource::MergeFrom(from.remote());
      break;
    }
    case SPECIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.config.core.v3.AsyncDataSource)
}

void AsyncDataSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AsyncDataSource_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  clear_has_specifier();
}

AsyncDataSource::~AsyncDataSource() {
  // @@protoc_insertion_point(destructor:envoy.config.core.v3.AsyncDataSource)
  SharedDtor();
}

void AsyncDataSource::SharedDtor() {
  if (has_specifier()) {
    clear_specifier();
  }
}

void AsyncDataSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AsyncDataSource& AsyncDataSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AsyncDataSource_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  return *internal_default_instance();
}


void AsyncDataSource::clear_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.config.core.v3.AsyncDataSource)
  switch (specifier_case()) {
    case kLocal: {
      delete specifier_.local_;
      break;
    }
    case kRemote: {
      delete specifier_.remote_;
      break;
    }
    case SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SPECIFIER_NOT_SET;
}


void AsyncDataSource::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.config.core.v3.AsyncDataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_specifier();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AsyncDataSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .envoy.config.core.v3.DataSource local = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_local(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .envoy.config.core.v3.RemoteDataSource remote = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_remote(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AsyncDataSource::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.config.core.v3.AsyncDataSource)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.config.core.v3.DataSource local = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_local()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.config.core.v3.RemoteDataSource remote = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_remote()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.config.core.v3.AsyncDataSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.config.core.v3.AsyncDataSource)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AsyncDataSource::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.config.core.v3.AsyncDataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.config.core.v3.DataSource local = 1;
  if (has_local()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::local(this), output);
  }

  // .envoy.config.core.v3.RemoteDataSource remote = 2;
  if (has_remote()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::remote(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.config.core.v3.AsyncDataSource)
}

::PROTOBUF_NAMESPACE_ID::uint8* AsyncDataSource::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:envoy.config.core.v3.AsyncDataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.config.core.v3.DataSource local = 1;
  if (has_local()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::local(this), target);
  }

  // .envoy.config.core.v3.RemoteDataSource remote = 2;
  if (has_remote()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::remote(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.config.core.v3.AsyncDataSource)
  return target;
}

size_t AsyncDataSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.config.core.v3.AsyncDataSource)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (specifier_case()) {
    // .envoy.config.core.v3.DataSource local = 1;
    case kLocal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifier_.local_);
      break;
    }
    // .envoy.config.core.v3.RemoteDataSource remote = 2;
    case kRemote: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifier_.remote_);
      break;
    }
    case SPECIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AsyncDataSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.config.core.v3.AsyncDataSource)
  GOOGLE_DCHECK_NE(&from, this);
  const AsyncDataSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AsyncDataSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.config.core.v3.AsyncDataSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.config.core.v3.AsyncDataSource)
    MergeFrom(*source);
  }
}

void AsyncDataSource::MergeFrom(const AsyncDataSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.config.core.v3.AsyncDataSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.specifier_case()) {
    case kLocal: {
      mutable_local()->::envoy::config::core::v3::DataSource::MergeFrom(from.local());
      break;
    }
    case kRemote: {
      mutable_remote()->::envoy::config::core::v3::RemoteDataSource::MergeFrom(from.remote());
      break;
    }
    case SPECIFIER_NOT_SET: {
      break;
    }
  }
}

void AsyncDataSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.config.core.v3.AsyncDataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsyncDataSource::CopyFrom(const AsyncDataSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.config.core.v3.AsyncDataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsyncDataSource::IsInitialized() const {
  return true;
}

void AsyncDataSource::InternalSwap(AsyncDataSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(specifier_, other->specifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AsyncDataSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransportSocket::InitAsDefaultInstance() {
  ::envoy::config::core::v3::_TransportSocket_default_instance_.typed_config_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class TransportSocket::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& typed_config(const TransportSocket* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
TransportSocket::_Internal::typed_config(const TransportSocket* msg) {
  return *msg->config_type_.typed_config_;
}
void TransportSocket::set_allocated_typed_config(PROTOBUF_NAMESPACE_ID::Any* typed_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_config_type();
  if (typed_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      typed_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, typed_config, submessage_arena);
    }
    set_has_typed_config();
    config_type_.typed_config_ = typed_config;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.config.core.v3.TransportSocket.typed_config)
}
void TransportSocket::clear_typed_config() {
  if (has_typed_config()) {
    delete config_type_.typed_config_;
    clear_has_config_type();
  }
}
TransportSocket::TransportSocket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.config.core.v3.TransportSocket)
}
TransportSocket::TransportSocket(const TransportSocket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  clear_has_config_type();
  switch (from.config_type_case()) {
    case kTypedConfig: {
      mutable_typed_config()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from.typed_config());
      break;
    }
    case CONFIG_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.config.core.v3.TransportSocket)
}

void TransportSocket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransportSocket_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_config_type();
}

TransportSocket::~TransportSocket() {
  // @@protoc_insertion_point(destructor:envoy.config.core.v3.TransportSocket)
  SharedDtor();
}

void TransportSocket::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_config_type()) {
    clear_config_type();
  }
}

void TransportSocket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransportSocket& TransportSocket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransportSocket_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  return *internal_default_instance();
}


void TransportSocket::clear_config_type() {
// @@protoc_insertion_point(one_of_clear_start:envoy.config.core.v3.TransportSocket)
  switch (config_type_case()) {
    case kTypedConfig: {
      delete config_type_.typed_config_;
      break;
    }
    case CONFIG_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONFIG_TYPE_NOT_SET;
}


void TransportSocket::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.config.core.v3.TransportSocket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_config_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransportSocket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "envoy.config.core.v3.TransportSocket.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any typed_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_typed_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransportSocket::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.config.core.v3.TransportSocket)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.validate.rules) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "envoy.config.core.v3.TransportSocket.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any typed_config = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_typed_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.config.core.v3.TransportSocket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.config.core.v3.TransportSocket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransportSocket::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.config.core.v3.TransportSocket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.validate.rules) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.TransportSocket.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.protobuf.Any typed_config = 3;
  if (has_typed_config()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::typed_config(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.config.core.v3.TransportSocket)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransportSocket::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:envoy.config.core.v3.TransportSocket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.validate.rules) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.TransportSocket.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.protobuf.Any typed_config = 3;
  if (has_typed_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::typed_config(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.config.core.v3.TransportSocket)
  return target;
}

size_t TransportSocket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.config.core.v3.TransportSocket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.validate.rules) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  switch (config_type_case()) {
    // .google.protobuf.Any typed_config = 3;
    case kTypedConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_type_.typed_config_);
      break;
    }
    case CONFIG_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransportSocket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.config.core.v3.TransportSocket)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportSocket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransportSocket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.config.core.v3.TransportSocket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.config.core.v3.TransportSocket)
    MergeFrom(*source);
  }
}

void TransportSocket::MergeFrom(const TransportSocket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.config.core.v3.TransportSocket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  switch (from.config_type_case()) {
    case kTypedConfig: {
      mutable_typed_config()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from.typed_config());
      break;
    }
    case CONFIG_TYPE_NOT_SET: {
      break;
    }
  }
}

void TransportSocket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.config.core.v3.TransportSocket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportSocket::CopyFrom(const TransportSocket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.config.core.v3.TransportSocket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportSocket::IsInitialized() const {
  return true;
}

void TransportSocket::InternalSwap(TransportSocket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(config_type_, other->config_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportSocket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RuntimeFractionalPercent::InitAsDefaultInstance() {
  ::envoy::config::core::v3::_RuntimeFractionalPercent_default_instance_._instance.get_mutable()->default_value_ = const_cast< ::envoy::type::v3::FractionalPercent*>(
      ::envoy::type::v3::FractionalPercent::internal_default_instance());
}
class RuntimeFractionalPercent::_Internal {
 public:
  static const ::envoy::type::v3::FractionalPercent& default_value(const RuntimeFractionalPercent* msg);
};

const ::envoy::type::v3::FractionalPercent&
RuntimeFractionalPercent::_Internal::default_value(const RuntimeFractionalPercent* msg) {
  return *msg->default_value_;
}
void RuntimeFractionalPercent::clear_default_value() {
  if (GetArenaNoVirtual() == nullptr && default_value_ != nullptr) {
    delete default_value_;
  }
  default_value_ = nullptr;
}
RuntimeFractionalPercent::RuntimeFractionalPercent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.config.core.v3.RuntimeFractionalPercent)
}
RuntimeFractionalPercent::RuntimeFractionalPercent(const RuntimeFractionalPercent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  runtime_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.runtime_key().empty()) {
    runtime_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.runtime_key_);
  }
  if (from.has_default_value()) {
    default_value_ = new ::envoy::type::v3::FractionalPercent(*from.default_value_);
  } else {
    default_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.config.core.v3.RuntimeFractionalPercent)
}

void RuntimeFractionalPercent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RuntimeFractionalPercent_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  runtime_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_value_ = nullptr;
}

RuntimeFractionalPercent::~RuntimeFractionalPercent() {
  // @@protoc_insertion_point(destructor:envoy.config.core.v3.RuntimeFractionalPercent)
  SharedDtor();
}

void RuntimeFractionalPercent::SharedDtor() {
  runtime_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete default_value_;
}

void RuntimeFractionalPercent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuntimeFractionalPercent& RuntimeFractionalPercent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuntimeFractionalPercent_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  return *internal_default_instance();
}


void RuntimeFractionalPercent::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.config.core.v3.RuntimeFractionalPercent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  runtime_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && default_value_ != nullptr) {
    delete default_value_;
  }
  default_value_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RuntimeFractionalPercent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .envoy.type.v3.FractionalPercent default_value = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_default_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string runtime_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_runtime_key(), ptr, ctx, "envoy.config.core.v3.RuntimeFractionalPercent.runtime_key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RuntimeFractionalPercent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.config.core.v3.RuntimeFractionalPercent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.type.v3.FractionalPercent default_value = 1 [(.validate.rules) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_default_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string runtime_key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_runtime_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->runtime_key().data(), static_cast<int>(this->runtime_key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "envoy.config.core.v3.RuntimeFractionalPercent.runtime_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.config.core.v3.RuntimeFractionalPercent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.config.core.v3.RuntimeFractionalPercent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RuntimeFractionalPercent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.config.core.v3.RuntimeFractionalPercent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.type.v3.FractionalPercent default_value = 1 [(.validate.rules) = {
  if (this->has_default_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::default_value(this), output);
  }

  // string runtime_key = 2;
  if (this->runtime_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_key().data(), static_cast<int>(this->runtime_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.RuntimeFractionalPercent.runtime_key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->runtime_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.config.core.v3.RuntimeFractionalPercent)
}

::PROTOBUF_NAMESPACE_ID::uint8* RuntimeFractionalPercent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:envoy.config.core.v3.RuntimeFractionalPercent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.type.v3.FractionalPercent default_value = 1 [(.validate.rules) = {
  if (this->has_default_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::default_value(this), target);
  }

  // string runtime_key = 2;
  if (this->runtime_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_key().data(), static_cast<int>(this->runtime_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.RuntimeFractionalPercent.runtime_key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->runtime_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.config.core.v3.RuntimeFractionalPercent)
  return target;
}

size_t RuntimeFractionalPercent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.config.core.v3.RuntimeFractionalPercent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string runtime_key = 2;
  if (this->runtime_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->runtime_key());
  }

  // .envoy.type.v3.FractionalPercent default_value = 1 [(.validate.rules) = {
  if (this->has_default_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *default_value_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuntimeFractionalPercent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.config.core.v3.RuntimeFractionalPercent)
  GOOGLE_DCHECK_NE(&from, this);
  const RuntimeFractionalPercent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuntimeFractionalPercent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.config.core.v3.RuntimeFractionalPercent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.config.core.v3.RuntimeFractionalPercent)
    MergeFrom(*source);
  }
}

void RuntimeFractionalPercent::MergeFrom(const RuntimeFractionalPercent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.config.core.v3.RuntimeFractionalPercent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.runtime_key().size() > 0) {

    runtime_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.runtime_key_);
  }
  if (from.has_default_value()) {
    mutable_default_value()->::envoy::type::v3::FractionalPercent::MergeFrom(from.default_value());
  }
}

void RuntimeFractionalPercent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.config.core.v3.RuntimeFractionalPercent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuntimeFractionalPercent::CopyFrom(const RuntimeFractionalPercent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.config.core.v3.RuntimeFractionalPercent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeFractionalPercent::IsInitialized() const {
  return true;
}

void RuntimeFractionalPercent::InternalSwap(RuntimeFractionalPercent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  runtime_key_.Swap(&other->runtime_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(default_value_, other->default_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuntimeFractionalPercent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControlPlane::InitAsDefaultInstance() {
}
class ControlPlane::_Internal {
 public:
};

ControlPlane::ControlPlane()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.config.core.v3.ControlPlane)
}
ControlPlane::ControlPlane(const ControlPlane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.identifier().empty()) {
    identifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.identifier_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.config.core.v3.ControlPlane)
}

void ControlPlane::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControlPlane_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ControlPlane::~ControlPlane() {
  // @@protoc_insertion_point(destructor:envoy.config.core.v3.ControlPlane)
  SharedDtor();
}

void ControlPlane::SharedDtor() {
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ControlPlane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlPlane& ControlPlane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlPlane_envoy_2fconfig_2fcore_2fv3_2fbase_2eproto.base);
  return *internal_default_instance();
}


void ControlPlane::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.config.core.v3.ControlPlane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ControlPlane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_identifier(), ptr, ctx, "envoy.config.core.v3.ControlPlane.identifier");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ControlPlane::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.config.core.v3.ControlPlane)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string identifier = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->identifier().data(), static_cast<int>(this->identifier().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "envoy.config.core.v3.ControlPlane.identifier"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.config.core.v3.ControlPlane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.config.core.v3.ControlPlane)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ControlPlane::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.config.core.v3.ControlPlane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string identifier = 1;
  if (this->identifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->identifier().data(), static_cast<int>(this->identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.ControlPlane.identifier");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->identifier(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.config.core.v3.ControlPlane)
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlPlane::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:envoy.config.core.v3.ControlPlane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string identifier = 1;
  if (this->identifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->identifier().data(), static_cast<int>(this->identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.config.core.v3.ControlPlane.identifier");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->identifier(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.config.core.v3.ControlPlane)
  return target;
}

size_t ControlPlane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.config.core.v3.ControlPlane)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string identifier = 1;
  if (this->identifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->identifier());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlPlane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.config.core.v3.ControlPlane)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlPlane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlPlane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.config.core.v3.ControlPlane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.config.core.v3.ControlPlane)
    MergeFrom(*source);
  }
}

void ControlPlane::MergeFrom(const ControlPlane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.config.core.v3.ControlPlane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.identifier().size() > 0) {

    identifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.identifier_);
  }
}

void ControlPlane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.config.core.v3.ControlPlane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlPlane::CopyFrom(const ControlPlane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.config.core.v3.ControlPlane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlPlane::IsInitialized() const {
  return true;
}

void ControlPlane::InternalSwap(ControlPlane* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlPlane::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v3
}  // namespace core
}  // namespace config
}  // namespace envoy
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::envoy::config::core::v3::Locality* Arena::CreateMaybeMessage< ::envoy::config::core::v3::Locality >(Arena* arena) {
  return Arena::CreateInternal< ::envoy::config::core::v3::Locality >(arena);
}
template<> PROTOBUF_NOINLINE ::envoy::config::core::v3::BuildVersion* Arena::CreateMaybeMessage< ::envoy::config::core::v3::BuildVersion >(Arena* arena) {
  return Arena::CreateInternal< ::envoy::config::core::v3::BuildVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::envoy::config::core::v3::Extension* Arena::CreateMaybeMessage< ::envoy::config::core::v3::Extension >(Arena* arena) {
  return Arena::CreateInternal< ::envoy::config::core::v3::Extension >(arena);
}
template<> PROTOBUF_NOINLINE ::envoy::config::core::v3::Node* Arena::CreateMaybeMessage< ::envoy::config::core::v3::Node >(Arena* arena) {
  return Arena::CreateInternal< ::envoy::config::core::v3::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::envoy::config::core::v3::Metadata_FilterMetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::envoy::config::core::v3::Metadata_FilterMetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::envoy::config::core::v3::Metadata_FilterMetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::envoy::config::core::v3::Metadata* Arena::CreateMaybeMessage< ::envoy::config::core::v3::Metadata >(Arena* arena) {
  return Arena::CreateInternal< ::envoy::config::core::v3::Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::envoy::config::core::v3::RuntimeUInt32* Arena::CreateMaybeMessage< ::envoy::config::core::v3::RuntimeUInt32 >(Arena* arena) {
  return Arena::CreateInternal< ::envoy::config::core::v3::RuntimeUInt32 >(arena);
}
template<> PROTOBUF_NOINLINE ::envoy::config::core::v3::RuntimeFeatureFlag* Arena::CreateMaybeMessage< ::envoy::config::core::v3::RuntimeFeatureFlag >(Arena* arena) {
  return Arena::CreateInternal< ::envoy::config::core::v3::RuntimeFeatureFlag >(arena);
}
template<> PROTOBUF_NOINLINE ::envoy::config::core::v3::HeaderValue* Arena::CreateMaybeMessage< ::envoy::config::core::v3::HeaderValue >(Arena* arena) {
  return Arena::CreateInternal< ::envoy::config::core::v3::HeaderValue >(arena);
}
template<> PROTOBUF_NOINLINE ::envoy::config::core::v3::HeaderValueOption* Arena::CreateMaybeMessage< ::envoy::config::core::v3::HeaderValueOption >(Arena* arena) {
  return Arena::CreateInternal< ::envoy::config::core::v3::HeaderValueOption >(arena);
}
template<> PROTOBUF_NOINLINE ::envoy::config::core::v3::HeaderMap* Arena::CreateMaybeMessage< ::envoy::config::core::v3::HeaderMap >(Arena* arena) {
  return Arena::CreateInternal< ::envoy::config::core::v3::HeaderMap >(arena);
}
template<> PROTOBUF_NOINLINE ::envoy::config::core::v3::DataSource* Arena::CreateMaybeMessage< ::envoy::config::core::v3::DataSource >(Arena* arena) {
  return Arena::CreateInternal< ::envoy::config::core::v3::DataSource >(arena);
}
template<> PROTOBUF_NOINLINE ::envoy::config::core::v3::RetryPolicy* Arena::CreateMaybeMessage< ::envoy::config::core::v3::RetryPolicy >(Arena* arena) {
  return Arena::CreateInternal< ::envoy::config::core::v3::RetryPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::envoy::config::core::v3::RemoteDataSource* Arena::CreateMaybeMessage< ::envoy::config::core::v3::RemoteDataSource >(Arena* arena) {
  return Arena::CreateInternal< ::envoy::config::core::v3::RemoteDataSource >(arena);
}
template<> PROTOBUF_NOINLINE ::envoy::config::core::v3::AsyncDataSource* Arena::CreateMaybeMessage< ::envoy::config::core::v3::AsyncDataSource >(Arena* arena) {
  return Arena::CreateInternal< ::envoy::config::core::v3::AsyncDataSource >(arena);
}
template<> PROTOBUF_NOINLINE ::envoy::config::core::v3::TransportSocket* Arena::CreateMaybeMessage< ::envoy::config::core::v3::TransportSocket >(Arena* arena) {
  return Arena::CreateInternal< ::envoy::config::core::v3::TransportSocket >(arena);
}
template<> PROTOBUF_NOINLINE ::envoy::config::core::v3::RuntimeFractionalPercent* Arena::CreateMaybeMessage< ::envoy::config::core::v3::RuntimeFractionalPercent >(Arena* arena) {
  return Arena::CreateInternal< ::envoy::config::core::v3::RuntimeFractionalPercent >(arena);
}
template<> PROTOBUF_NOINLINE ::envoy::config::core::v3::ControlPlane* Arena::CreateMaybeMessage< ::envoy::config::core::v3::ControlPlane >(Arena* arena) {
  return Arena::CreateInternal< ::envoy::config::core::v3::ControlPlane >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
