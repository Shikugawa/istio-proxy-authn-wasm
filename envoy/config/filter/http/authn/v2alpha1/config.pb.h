// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/filter/http/authn/v2alpha1/config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "authentication/v1alpha1/policy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto;
namespace istio {
namespace envoy {
namespace config {
namespace filter {
namespace http {
namespace authn {
namespace v2alpha1 {
class FilterConfig;
class FilterConfigDefaultTypeInternal;
extern FilterConfigDefaultTypeInternal _FilterConfig_default_instance_;
class FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse;
class FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUseDefaultTypeInternal;
extern FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUseDefaultTypeInternal _FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse_default_instance_;
}  // namespace v2alpha1
}  // namespace authn
}  // namespace http
}  // namespace filter
}  // namespace config
}  // namespace envoy
}  // namespace istio
PROTOBUF_NAMESPACE_OPEN
template<> ::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig* Arena::CreateMaybeMessage<::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig>(Arena*);
template<> ::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse* Arena::CreateMaybeMessage<::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace istio {
namespace envoy {
namespace config {
namespace filter {
namespace http {
namespace authn {
namespace v2alpha1 {

// ===================================================================

class FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse();
  FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse& other);
  static const FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse*>(&_FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.JwtOutputPayloadLocationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.JwtOutputPayloadLocationsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto);
    return ::descriptor_table_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class FilterConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig) */ {
 public:
  FilterConfig();
  virtual ~FilterConfig();

  FilterConfig(const FilterConfig& from);
  FilterConfig(FilterConfig&& from) noexcept
    : FilterConfig() {
    *this = ::std::move(from);
  }

  inline FilterConfig& operator=(const FilterConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterConfig& operator=(FilterConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilterConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FilterConfig* internal_default_instance() {
    return reinterpret_cast<const FilterConfig*>(
               &_FilterConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FilterConfig& a, FilterConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilterConfig* New() const final {
    return CreateMaybeMessage<FilterConfig>(nullptr);
  }

  FilterConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilterConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilterConfig& from);
  void MergeFrom(const FilterConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto);
    return ::descriptor_table_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kJwtOutputPayloadLocationsFieldNumber = 2,
    kPolicyFieldNumber = 1,
    kSkipValidateTrustDomainFieldNumber = 3,
  };
  // map<string, string> jwt_output_payload_locations = 2;
  int jwt_output_payload_locations_size() const;
  void clear_jwt_output_payload_locations();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      jwt_output_payload_locations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_jwt_output_payload_locations();

  // .istio.authentication.v1alpha1.Policy policy = 1;
  bool has_policy() const;
  void clear_policy();
  const ::istio::authentication::v1alpha1::Policy& policy() const;
  ::istio::authentication::v1alpha1::Policy* release_policy();
  ::istio::authentication::v1alpha1::Policy* mutable_policy();
  void set_allocated_policy(::istio::authentication::v1alpha1::Policy* policy);

  // bool skip_validate_trust_domain = 3;
  void clear_skip_validate_trust_domain();
  bool skip_validate_trust_domain() const;
  void set_skip_validate_trust_domain(bool value);

  // @@protoc_insertion_point(class_scope:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > jwt_output_payload_locations_;
  ::istio::authentication::v1alpha1::Policy* policy_;
  bool skip_validate_trust_domain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FilterConfig

// .istio.authentication.v1alpha1.Policy policy = 1;
inline bool FilterConfig::has_policy() const {
  return this != internal_default_instance() && policy_ != nullptr;
}
inline const ::istio::authentication::v1alpha1::Policy& FilterConfig::policy() const {
  const ::istio::authentication::v1alpha1::Policy* p = policy_;
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.policy)
  return p != nullptr ? *p : *reinterpret_cast<const ::istio::authentication::v1alpha1::Policy*>(
      &::istio::authentication::v1alpha1::_Policy_default_instance_);
}
inline ::istio::authentication::v1alpha1::Policy* FilterConfig::release_policy() {
  // @@protoc_insertion_point(field_release:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.policy)
  
  ::istio::authentication::v1alpha1::Policy* temp = policy_;
  policy_ = nullptr;
  return temp;
}
inline ::istio::authentication::v1alpha1::Policy* FilterConfig::mutable_policy() {
  
  if (policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::istio::authentication::v1alpha1::Policy>(GetArenaNoVirtual());
    policy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.policy)
  return policy_;
}
inline void FilterConfig::set_allocated_policy(::istio::authentication::v1alpha1::Policy* policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(policy_);
  }
  if (policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy, submessage_arena);
    }
    
  } else {
    
  }
  policy_ = policy;
  // @@protoc_insertion_point(field_set_allocated:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.policy)
}

// map<string, string> jwt_output_payload_locations = 2;
inline int FilterConfig::jwt_output_payload_locations_size() const {
  return jwt_output_payload_locations_.size();
}
inline void FilterConfig::clear_jwt_output_payload_locations() {
  jwt_output_payload_locations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
FilterConfig::jwt_output_payload_locations() const {
  // @@protoc_insertion_point(field_map:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.jwt_output_payload_locations)
  return jwt_output_payload_locations_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
FilterConfig::mutable_jwt_output_payload_locations() {
  // @@protoc_insertion_point(field_mutable_map:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.jwt_output_payload_locations)
  return jwt_output_payload_locations_.MutableMap();
}

// bool skip_validate_trust_domain = 3;
inline void FilterConfig::clear_skip_validate_trust_domain() {
  skip_validate_trust_domain_ = false;
}
inline bool FilterConfig::skip_validate_trust_domain() const {
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.skip_validate_trust_domain)
  return skip_validate_trust_domain_;
}
inline void FilterConfig::set_skip_validate_trust_domain(bool value) {
  
  skip_validate_trust_domain_ = value;
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.skip_validate_trust_domain)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2alpha1
}  // namespace authn
}  // namespace http
}  // namespace filter
}  // namespace config
}  // namespace envoy
}  // namespace istio

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto
