// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/filter/http/authn/v2alpha1/config.proto

#include "envoy/config/filter/http/authn/v2alpha1/config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_authentication_2fv1alpha1_2fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Policy_authentication_2fv1alpha1_2fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto;
namespace istio {
namespace envoy {
namespace config {
namespace filter {
namespace http {
namespace authn {
namespace v2alpha1 {
class FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse> _instance;
} _FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse_default_instance_;
class FilterConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilterConfig> _instance;
} _FilterConfig_default_instance_;
}  // namespace v2alpha1
}  // namespace authn
}  // namespace http
}  // namespace filter
}  // namespace config
}  // namespace envoy
}  // namespace istio
static void InitDefaultsscc_info_FilterConfig_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::istio::envoy::config::filter::http::authn::v2alpha1::_FilterConfig_default_instance_;
    new (ptr) ::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FilterConfig_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_FilterConfig_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto}, {
      &scc_info_Policy_authentication_2fv1alpha1_2fpolicy_2eproto.base,
      &scc_info_FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto.base,}};

static void InitDefaultsscc_info_FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::istio::envoy::config::filter::http::authn::v2alpha1::_FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse();
  }
  ::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig, policy_),
  PROTOBUF_FIELD_OFFSET(::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig, jwt_output_payload_locations_),
  PROTOBUF_FIELD_OFFSET(::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig, skip_validate_trust_domain_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse)},
  { 9, -1, sizeof(::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::istio::envoy::config::filter::http::authn::v2alpha1::_FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::istio::envoy::config::filter::http::authn::v2alpha1::_FilterConfig_default_instance_),
};

const char descriptor_table_protodef_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n4envoy/config/filter/http/authn/v2alpha"
  "1/config.proto\022-istio.envoy.config.filte"
  "r.http.authn.v2alpha1\032$authentication/v1"
  "alpha1/policy.proto\"\256\002\n\014FilterConfig\0225\n\006"
  "policy\030\001 \001(\0132%.istio.authentication.v1al"
  "pha1.Policy\022\200\001\n\034jwt_output_payload_locat"
  "ions\030\002 \003(\0132Z.istio.envoy.config.filter.h"
  "ttp.authn.v2alpha1.FilterConfig.JwtOutpu"
  "tPayloadLocationsEntry\022\"\n\032skip_validate_"
  "trust_domain\030\003 \001(\010\032@\n\036JwtOutputPayloadLo"
  "cationsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t"
  ":\0028\001B6Z4istio.io/api/envoy/config/filter"
  "/http/authn/v2alpha1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto_deps[1] = {
  &::descriptor_table_authentication_2fv1alpha1_2fpolicy_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto_sccs[2] = {
  &scc_info_FilterConfig_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto.base,
  &scc_info_FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto_once;
static bool descriptor_table_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto = {
  &descriptor_table_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto_initialized, descriptor_table_protodef_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto, "envoy/config/filter/http/authn/v2alpha1/config.proto", 508,
  &descriptor_table_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto_once, descriptor_table_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto_sccs, descriptor_table_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto::offsets,
  file_level_metadata_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto, 2, file_level_enum_descriptors_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto, file_level_service_descriptors_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto), true);
namespace istio {
namespace envoy {
namespace config {
namespace filter {
namespace http {
namespace authn {
namespace v2alpha1 {

// ===================================================================

FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse::FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse() {}
FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse::FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse::MergeFrom(const FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void FilterConfig::InitAsDefaultInstance() {
  ::istio::envoy::config::filter::http::authn::v2alpha1::_FilterConfig_default_instance_._instance.get_mutable()->policy_ = const_cast< ::istio::authentication::v1alpha1::Policy*>(
      ::istio::authentication::v1alpha1::Policy::internal_default_instance());
}
class FilterConfig::_Internal {
 public:
  static const ::istio::authentication::v1alpha1::Policy& policy(const FilterConfig* msg);
};

const ::istio::authentication::v1alpha1::Policy&
FilterConfig::_Internal::policy(const FilterConfig* msg) {
  return *msg->policy_;
}
void FilterConfig::clear_policy() {
  if (GetArenaNoVirtual() == nullptr && policy_ != nullptr) {
    delete policy_;
  }
  policy_ = nullptr;
}
FilterConfig::FilterConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
}
FilterConfig::FilterConfig(const FilterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  jwt_output_payload_locations_.MergeFrom(from.jwt_output_payload_locations_);
  if (from.has_policy()) {
    policy_ = new ::istio::authentication::v1alpha1::Policy(*from.policy_);
  } else {
    policy_ = nullptr;
  }
  skip_validate_trust_domain_ = from.skip_validate_trust_domain_;
  // @@protoc_insertion_point(copy_constructor:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
}

void FilterConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FilterConfig_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto.base);
  ::memset(&policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skip_validate_trust_domain_) -
      reinterpret_cast<char*>(&policy_)) + sizeof(skip_validate_trust_domain_));
}

FilterConfig::~FilterConfig() {
  // @@protoc_insertion_point(destructor:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  SharedDtor();
}

void FilterConfig::SharedDtor() {
  if (this != internal_default_instance()) delete policy_;
}

void FilterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilterConfig& FilterConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilterConfig_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void FilterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jwt_output_payload_locations_.Clear();
  if (GetArenaNoVirtual() == nullptr && policy_ != nullptr) {
    delete policy_;
  }
  policy_ = nullptr;
  skip_validate_trust_domain_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FilterConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .istio.authentication.v1alpha1.Policy policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> jwt_output_payload_locations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&jwt_output_payload_locations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // bool skip_validate_trust_domain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          skip_validate_trust_domain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FilterConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.authentication.v1alpha1.Policy policy = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> jwt_output_payload_locations = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&jwt_output_payload_locations_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.JwtOutputPayloadLocationsEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.JwtOutputPayloadLocationsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool skip_validate_trust_domain = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_validate_trust_domain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FilterConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.authentication.v1alpha1.Policy policy = 1;
  if (this->has_policy()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::policy(this), output);
  }

  // map<string, string> jwt_output_payload_locations = 2;
  if (!this->jwt_output_payload_locations().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.JwtOutputPayloadLocationsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.JwtOutputPayloadLocationsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->jwt_output_payload_locations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->jwt_output_payload_locations().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->jwt_output_payload_locations().begin();
          it != this->jwt_output_payload_locations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse::Funcs::SerializeToCodedStream(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->jwt_output_payload_locations().begin();
          it != this->jwt_output_payload_locations().end(); ++it) {
        FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse::Funcs::SerializeToCodedStream(2, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool skip_validate_trust_domain = 3;
  if (this->skip_validate_trust_domain() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->skip_validate_trust_domain(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.authentication.v1alpha1.Policy policy = 1;
  if (this->has_policy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::policy(this), target);
  }

  // map<string, string> jwt_output_payload_locations = 2;
  if (!this->jwt_output_payload_locations().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.JwtOutputPayloadLocationsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.JwtOutputPayloadLocationsEntry.value");
      }
    };

    if (false &&
        this->jwt_output_payload_locations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->jwt_output_payload_locations().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->jwt_output_payload_locations().begin();
          it != this->jwt_output_payload_locations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse::Funcs::SerializeToArray(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->jwt_output_payload_locations().begin();
          it != this->jwt_output_payload_locations().end(); ++it) {
        target = FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse::Funcs::SerializeToArray(2, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool skip_validate_trust_domain = 3;
  if (this->skip_validate_trust_domain() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->skip_validate_trust_domain(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  return target;
}

size_t FilterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> jwt_output_payload_locations = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->jwt_output_payload_locations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->jwt_output_payload_locations().begin();
      it != this->jwt_output_payload_locations().end(); ++it) {
    total_size += FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .istio.authentication.v1alpha1.Policy policy = 1;
  if (this->has_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *policy_);
  }

  // bool skip_validate_trust_domain = 3;
  if (this->skip_validate_trust_domain() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilterConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
    MergeFrom(*source);
  }
}

void FilterConfig::MergeFrom(const FilterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jwt_output_payload_locations_.MergeFrom(from.jwt_output_payload_locations_);
  if (from.has_policy()) {
    mutable_policy()->::istio::authentication::v1alpha1::Policy::MergeFrom(from.policy());
  }
  if (from.skip_validate_trust_domain() != 0) {
    set_skip_validate_trust_domain(from.skip_validate_trust_domain());
  }
}

void FilterConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterConfig::CopyFrom(const FilterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterConfig::IsInitialized() const {
  return true;
}

void FilterConfig::InternalSwap(FilterConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jwt_output_payload_locations_.Swap(&other->jwt_output_payload_locations_);
  swap(policy_, other->policy_);
  swap(skip_validate_trust_domain_, other->skip_validate_trust_domain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2alpha1
}  // namespace authn
}  // namespace http
}  // namespace filter
}  // namespace config
}  // namespace envoy
}  // namespace istio
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig* Arena::CreateMaybeMessage< ::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig >(Arena* arena) {
  return Arena::CreateInternal< ::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
